{
    "review_data": {
        "repository": "mishachepi/junior",
        "pr_number": 4,
        "title": "add readme",
        "description": "This is description of PR",
        "author": "mishachepi",
        "author_id": 70561854,
        "base_branch": "main",
        "head_branch": "test2",
        "base_sha": "0708a4a3c0dd53c7098e14b8e52c509ff7bb1b78",
        "head_sha": "3174aec1068426e9033b02922491e8546cca8aa1",
        "diff_url": "https://github.com/mishachepi/junior/pull/4.diff",
        "patch_url": "https://github.com/mishachepi/junior/pull/4.patch",
        "pr_url": "https://github.com/mishachepi/junior/pull/4",
        "issue_url": "https://api.github.com/repos/mishachepi/junior/issues/4",
        "clone_url": "https://github.com/mishachepi/junior.git",
        "ssh_url": "git@github.com:mishachepi/junior.git",
        "default_branch": "main",
        "language": "Python",
        "size": 74,
        "is_private": false,
        "repo_description": "Code reviewer",
        "created_at": "2025-09-20T13:53:31Z",
        "updated_at": "2025-09-20T13:53:31Z",
        "closed_at": null,
        "merged_at": null,
        "additions": 214,
        "deletions": 7,
        "changed_files": 2,
        "state": "open",
        "draft": false,
        "mergeable": null,
        "mergeable_state": "unknown",
        "merged": false,
        "merge_commit_sha": null,
        "commits": [],
        "commits_count": 0,
        "linked_issues": [],
        "milestone": null,
        "labels": [
            "documentation"
        ],
        "new_label": {
            "name": "documentation",
            "color": "0075ca",
            "description": "Improvements or additions to documentation"
        },
        "requested_reviewers": [],
        "assignees": [
            "mishachepi"
        ],
        "action": "labeled",
        "sender": "mishachepi",
        "webhook_received_at": "2025-09-20T14:46:37.003783"
    },
    "diff_content": "diff --git a/README.md b/README.md\nindex 1a1bbdf..79d5edb 100644\n--- a/README.md\n+++ b/README.md\n@@ -98,14 +98,14 @@ Run the comprehensive test suite:\n uv run python scripts/quick_test.py\n ```\n \n-Manual PR review:\n+Check configuration:\n ```bash\n-uv run junior review-pr owner/repo 123\n+uv run junior config-check\n ```\n \n-Check configuration:\n+Start webhook server:\n ```bash\n-uv run junior config-check\n+uv run junior webhook-server\n ```\n \n ## \ud83d\udcc1 Project Structure\n@@ -113,16 +113,16 @@ uv run junior config-check\n ```\n junior/\n \u251c\u2500\u2500 src/junior/\n-\u2502   \u251c\u2500\u2500 api.py              # FastAPI webhook service\n+\u2502   \u251c\u2500\u2500 api.py              # FastAPI webhook service  \n \u2502   \u251c\u2500\u2500 webhook.py          # GitHub webhook processing\n \u2502   \u251c\u2500\u2500 review_agent.py     # Specialized AI review pipeline\n \u2502   \u251c\u2500\u2500 mcp_tools.py        # Repository analysis tools\n \u2502   \u251c\u2500\u2500 github_client.py    # GitHub API integration\n \u2502   \u251c\u2500\u2500 models.py           # Data models and schemas\n \u2502   \u251c\u2500\u2500 config.py          # Configuration management\n-\u2502   \u2514\u2500\u2500 cli.py             # Command-line interface\n+\u2502   \u2514\u2500\u2500 cli.py             # CLI (config-check, webhook-server)\n \u251c\u2500\u2500 tests/                 # Test suite\n-\u251c\u2500\u2500 scripts/              # Utility scripts\n+\u251c\u2500\u2500 scripts/              # Utility scripts  \n \u251c\u2500\u2500 helm/                # Kubernetes deployment\n \u2514\u2500\u2500 docs/                # Documentation\n ```\ndiff --git a/STARTUP.md b/STARTUP.md\nnew file mode 100644\nindex 0000000..8115365\n--- /dev/null\n+++ b/STARTUP.md\n@@ -0,0 +1,207 @@\n+# \ud83d\ude80 Junior Agent - Complete Startup Guide\n+\n+## \u2705 **System Status: READY FOR PRODUCTION**\n+\n+Your Junior AI Code Review Agent has been fully tested and is ready to review PRs!\n+\n+## \ud83d\udd27 **Environment Setup**\n+\n+### 1. Required Environment Variables\n+\n+Create your `.env` file:\n+```bash\n+cp .env.example .env\n+```\n+\n+Add these **required** variables:\n+```env\n+# GitHub Integration (REQUIRED)\n+GITHUB_TOKEN=ghp_your_github_personal_access_token\n+\n+# AI Provider (REQUIRED - choose one)\n+OPENAI_API_KEY=sk-your_openai_api_key\n+# OR\n+ANTHROPIC_API_KEY=sk-ant-your_anthropic_api_key\n+\n+# Optional Security\n+GITHUB_WEBHOOK_SECRET=your_webhook_secret\n+SECRET_KEY=your_app_secret_key\n+```\n+\n+### 2. GitHub Token Setup\n+\n+Create a GitHub Personal Access Token with these permissions:\n+- `repo` - Full repository access\n+- `pull_requests:write` - Create reviews and comments  \n+- `metadata:read` - Read repository metadata\n+\n+## \ud83c\udfaf **Start the Agent**\n+\n+### Option 1: Quick Start Script\n+```bash\n+./scripts/start.sh\n+```\n+\n+### Option 2: Manual Start\n+```bash\n+# Test everything works\n+uv run python scripts/quick_test.py\n+\n+# Start the webhook server\n+uv run junior webhook-server --port 8000\n+```\n+\n+### Option 3: Direct FastAPI\n+```bash\n+uv run uvicorn src.junior.api:app --host 0.0.0.0 --port 8000\n+```\n+\n+## \ud83d\udd0c **GitHub Webhook Configuration**\n+\n+1. Go to your repository \u2192 **Settings** \u2192 **Webhooks** \u2192 **Add webhook**\n+\n+2. Configure webhook:\n+   ```\n+   Payload URL: https://your-server.com/webhook/github\n+   Content Type: application/json\n+   Secret: your_webhook_secret (optional but recommended)\n+   Events: \u2705 Pull requests\n+   Active: \u2705 Active\n+   ```\n+\n+3. Test webhook:\n+   - Create a test PR\n+   - Check webhook deliveries in GitHub\n+   - Check your server logs\n+\n+## \ud83d\udcca **Available Endpoints**\n+\n+| Endpoint | Method | Purpose |\n+|----------|--------|---------|\n+| `/health` | GET | Health check - always works |\n+| `/ready` | GET | Readiness check - requires GitHub token |\n+| `/webhook/github` | POST | Main webhook endpoint for PR events |\n+| `/review` | POST | Manual review endpoint (debug mode only) |\n+\n+## \ud83e\uddea **Testing Commands**\n+\n+```bash\n+# Test all imports and basic functionality\n+uv run python scripts/quick_test.py\n+\n+# Test complete end-to-end flow (with mocks)\n+uv run python scripts/test_complete_flow.py\n+\n+# Test webhook with realistic data (requires running server)\n+uv run python scripts/test_webhook_simple.py\n+\n+# Test health endpoint\n+curl http://localhost:8000/health\n+\n+# Test readiness (requires GITHUB_TOKEN)\n+curl http://localhost:8000/ready\n+\n+# Check configuration and API connectivity\n+uv run junior config-check\n+\n+# View all available CLI commands\n+uv run junior --help\n+```\n+\n+## \ud83d\udd0d **Execution Flow Verified**\n+\n+\u2705 **1. Webhook Reception** (`/webhook/github`)\n+- Receives GitHub PR events\n+- Validates payload structure\n+- Verifies webhook signature (if configured)\n+- Filters for relevant events (opened, synchronize, ready_for_review)\n+\n+\u2705 **2. PR Data Extraction** (`WebhookProcessor`)\n+- Extracts comprehensive PR metadata\n+- Parses linked issues (`fixes #123`)\n+- Collects commit history and file changes\n+- Gathers repository context\n+\n+\u2705 **3. Repository Analysis** (`MCPRepositoryAnalyzer`)\n+- Clones repository to temporary directory\n+- Analyzes project structure (Python, Node.js, etc.)\n+- Prioritizes files: changed \u2192 config \u2192 context \u2192 entry points\n+- Extracts relevant file contents with smart limits\n+\n+\u2705 **4. AI Review Pipeline** (`LogicalReviewAgent`)\n+- **Logic Analysis**: Business logic, conditional flows, edge cases\n+- **Security Review**: Authentication logic, business vulnerabilities\n+- **Critical Bug Detection**: Memory safety, race conditions, zero-day potential\n+- **Naming Review**: Semantic clarity, domain appropriateness\n+- **Optimization Analysis**: Performance bottlenecks, algorithmic improvements\n+- **Design Principles**: DRY, KISS, SOLID adherence\n+\n+\u2705 **5. GitHub Integration** (`GitHubClient`)\n+- Formats review summary with severity breakdown\n+- Creates inline comments (max 20 most critical)\n+- Submits review with appropriate status (approve/request_changes/comment)\n+\n+## \ud83d\udcdd **Sample Review Output**\n+\n+Junior will post reviews like this:\n+\n+```markdown\n+## \ud83e\udd16 Junior Code Review\n+\n+This PR introduces new authentication logic with a few concerns around error handling and security.\n+\n+\ud83d\udcca **Findings Summary**: 3 total \u2022 \ud83d\udd34 1 critical \u2022 \ud83d\udfe1 2 medium\n+\n+---\n+*Reviewed by Junior AI Agent - Focusing on logic, security, and code quality*\n+```\n+\n+Plus inline comments on specific lines with suggestions.\n+\n+## \ud83d\udea8 **Review Focus Areas**\n+\n+Junior specializes in **logical analysis**, not linting:\n+\n+**\u2705 What Junior Reviews:**\n+- Business logic correctness\n+- Security vulnerabilities (logical)\n+- Critical bugs and race conditions\n+- Naming semantics and clarity\n+- Performance bottlenecks\n+- Design principle violations\n+\n+**\u274c What Junior Ignores:**\n+- Code formatting (use Prettier/Black)\n+- Syntax errors (use your IDE)\n+- Style guide violations (use ESLint/Ruff)\n+- Dependency vulnerabilities (use Dependabot)\n+\n+## \ud83d\udc33 **Docker Deployment**\n+\n+```bash\n+# Build and run\n+docker build -t junior .\n+docker run -p 8000:8000 --env-file .env junior\n+\n+# Or use docker-compose\n+docker-compose up -d\n+```\n+\n+## \u2638\ufe0f **Kubernetes Deployment**\n+\n+```bash\n+# Deploy to k8s\n+helm install junior helm/junior \\\n+  --set secrets.githubToken=\"$GITHUB_TOKEN\" \\\n+  --set secrets.openaiApiKey=\"$OPENAI_API_KEY\"\n+```\n+\n+## \ud83c\udf89 **You're Ready!**\n+\n+Your Junior agent is now:\n+- \u2705 **Tested**: All components working\n+- \u2705 **Optimized**: Clean, focused codebase  \n+- \u2705 **Production-Ready**: Proper error handling and logging\n+- \u2705 **Documented**: Clear setup and usage instructions\n+\n+Just add your API keys and start reviewing PRs! \ud83d\ude80\n\\ No newline at end of file\n",
    "file_contents": {
        "README.md": "# Junior - AI Code Review Agent\n\nAn intelligent, webhook-based AI agent that provides comprehensive code reviews for GitHub pull requests, focusing on logic, security, critical bugs, and code quality.\n\n## \ud83d\ude80 Quick Start\n\n1. **Clone and setup:**\n   ```bash\n   git clone <repository-url>\n   cd junior\n   uv sync --all-extras\n   ```\n\n2. **Configure environment:**\n   ```bash\n   cp .env.example .env\n   # Edit .env with your API keys\n   ```\n\n3. **Test the setup:**\n   ```bash\n   uv run python scripts/quick_test.py\n   ```\n\n4. **Start the webhook server:**\n   ```bash\n   ./scripts/start.sh\n   # OR\n   uv run junior webhook-server --port 8000\n   ```\n\n## \ud83d\udd27 Configuration\n\nRequired environment variables:\n- `GITHUB_TOKEN` - GitHub Personal Access Token with repo permissions\n- Either `OPENAI_API_KEY` or `ANTHROPIC_API_KEY` - AI provider API key\n\nOptional:\n- `GITHUB_WEBHOOK_SECRET` - GitHub webhook secret for security\n- `SECRET_KEY` - Application secret key\n\n## \ud83d\udccb How It Works\n\n### The Review Flow\n\n1. **GitHub PR Event** \u2192 Webhook receives PR opened/updated/ready-for-review\n2. **Data Extraction** \u2192 Comprehensive PR information extraction including:\n   - PR metadata (title, description, author, branches)\n   - Commit history and linked issues  \n   - File changes and diff content\n   - Repository context and dependencies\n\n3. **MCP Repository Analysis** \u2192 Smart analysis with:\n   - Temporary repository cloning\n   - Project structure detection (Python, Node.js, etc.)\n   - Priority-based file content extraction\n   - Framework and dependency analysis\n\n4. **AI Review Pipeline** \u2192 Specialized review focusing on:\n   - **Logic Analysis** - Business logic, conditional flows, edge cases\n   - **Security Review** - Authentication logic, business logic vulnerabilities\n   - **Critical Bug Detection** - Memory safety, race conditions, zero-day potential\n   - **Naming Review** - Semantic clarity, domain appropriateness  \n   - **Optimization** - Algorithmic improvements, performance bottlenecks\n   - **Design Principles** - DRY, KISS, SOLID adherence\n\n5. **GitHub Integration** \u2192 Structured review submission:\n   - Review summary with severity breakdown\n   - Inline comments (limited to 20 most critical)\n   - Approve/Request Changes/Comment status\n\n### What Makes Junior Different\n\n- **Logic-Focused**: Unlike linters, Junior analyzes business logic and architectural decisions\n- **Security-Aware**: Identifies logical security vulnerabilities, not just code patterns  \n- **Context-Rich**: Uses repository structure and project dependencies for informed reviews\n- **Structured Output**: Consistent, actionable feedback with severity levels and suggestions\n\n## \ud83d\udd0c GitHub Integration\n\n### Webhook Setup\n\n1. Go to your repository \u2192 Settings \u2192 Webhooks \u2192 Add webhook\n2. Set Payload URL to: `https://your-server.com/webhook/github`\n3. Content type: `application/json`\n4. Select: \"Pull requests\" events\n5. Add webhook secret (optional but recommended)\n\n### Required GitHub Token Permissions\n\n- `repo` - Repository access\n- `pull_requests:write` - Create reviews and comments\n\n## \ud83e\uddea Testing\n\nRun the comprehensive test suite:\n```bash\nuv run python scripts/quick_test.py\n```\n\nCheck configuration:\n```bash\nuv run junior config-check\n```\n\nStart webhook server:\n```bash\nuv run junior webhook-server\n```\n\n## \ud83d\udcc1 Project Structure\n\n```\njunior/\n\u251c\u2500\u2500 src/junior/\n\u2502   \u251c\u2500\u2500 api.py              # FastAPI webhook service  \n\u2502   \u251c\u2500\u2500 webhook.py          # GitHub webhook processing\n\u2502   \u251c\u2500\u2500 review_agent.py     # Specialized AI review pipeline\n\u2502   \u251c\u2500\u2500 mcp_tools.py        # Repository analysis tools\n\u2502   \u251c\u2500\u2500 github_client.py    # GitHub API integration\n\u2502   \u251c\u2500\u2500 models.py           # Data models and schemas\n\u2502   \u251c\u2500\u2500 config.py          # Configuration management\n\u2502   \u2514\u2500\u2500 cli.py             # CLI (config-check, webhook-server)\n\u251c\u2500\u2500 tests/                 # Test suite\n\u251c\u2500\u2500 scripts/              # Utility scripts  \n\u251c\u2500\u2500 helm/                # Kubernetes deployment\n\u2514\u2500\u2500 docs/                # Documentation\n```\n\n## \ud83d\udea8 Review Categories\n\nJunior focuses on high-impact issues:\n\n- **Logic Issues** - Incorrect business logic, missing edge cases\n- **Security** - Authentication flaws, business logic vulnerabilities  \n- **Critical Bugs** - Memory safety, race conditions, data corruption\n- **Naming** - Semantic clarity, domain appropriateness\n- **Optimization** - Performance bottlenecks, algorithmic improvements\n- **Principles** - DRY, KISS, SOLID violations\n\n## \ud83d\udee0\ufe0f Development\n\n### Running Tests\n```bash\nuv run pytest\nuv run pytest --cov=src/junior --cov-report=xml\n```\n\n### Code Quality\n```bash\nuv run ruff check .\nuv run ruff format .\nuv run mypy src/\n```\n\n### Development Server\n```bash\nuv run junior webhook-server --reload --debug\n```\n\n## \ud83d\udc33 Docker\n\n### Build and Run\n```bash\n# Build image\ndocker build -t junior .\n\n# Run with docker-compose\ndocker-compose up -d\n```\n\n## \u2638\ufe0f Kubernetes Deployment\n\nDeploy to Kubernetes using Helm:\n\n```bash\n# Install dependencies\nhelm dependency update helm/junior\n\n# Deploy\nhelm install junior helm/junior \\\n  --set secrets.openaiApiKey=\"your-key\" \\\n  --set secrets.githubToken=\"your-token\" \\\n  --set secrets.secretKey=\"your-secret\"\n```\n\n## \u2699\ufe0f Advanced Configuration\n\n### Review Settings\n```env\n# Review toggles\nENABLE_SECURITY_CHECKS=true\nENABLE_PERFORMANCE_CHECKS=true\nENABLE_STYLE_CHECKS=true\nENABLE_COMPLEXITY_CHECKS=true\n\n# Review limits\nMAX_FILE_SIZE=100000\nMAX_FILES_PER_PR=50\nREVIEW_TIMEOUT=300\n```\n\n### AI Model Settings\n```env\n# Model configuration\nDEFAULT_MODEL=gpt-4o\nTEMPERATURE=0.1\nMAX_TOKENS=4000\n```\n\n## \ud83c\udfd7\ufe0f Architecture\n\nJunior uses a modern, webhook-driven architecture:\n\n- **FastAPI** - Webhook endpoints and API services\n- **LangChain + LangGraph** - Structured AI workflows  \n- **MCP Tools** - Repository analysis and understanding\n- **Pydantic** - Data validation and settings\n- **GitPython** - Git operations and repository analysis\n\n### Review Pipeline Architecture\n\n```\nGitHub PR Event \u2192 Webhook Validation \u2192 Repository Cloning \u2192 \nFile Analysis \u2192 AI Review Pipeline \u2192 GitHub API Response\n```\n\nEach step is optimized for accuracy and performance, with comprehensive error handling and logging.\n\n## \ud83e\udd1d Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Add tests for new functionality\n5. Run the test suite\n6. Submit a pull request\n\n## \ud83d\udcc4 License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## \ud83d\udcde Support\n\n- \ud83d\udc1b [Issue Tracker](https://github.com/yourusername/junior/issues)\n- \ud83d\udcac [Discussions](https://github.com/yourusername/junior/discussions)\n- \ud83d\udcd6 [Documentation](https://github.com/yourusername/junior/wiki)",
        "STARTUP.md": "# \ud83d\ude80 Junior Agent - Complete Startup Guide\n\n## \u2705 **System Status: READY FOR PRODUCTION**\n\nYour Junior AI Code Review Agent has been fully tested and is ready to review PRs!\n\n## \ud83d\udd27 **Environment Setup**\n\n### 1. Required Environment Variables\n\nCreate your `.env` file:\n```bash\ncp .env.example .env\n```\n\nAdd these **required** variables:\n```env\n# GitHub Integration (REQUIRED)\nGITHUB_TOKEN=ghp_your_github_personal_access_token\n\n# AI Provider (REQUIRED - choose one)\nOPENAI_API_KEY=sk-your_openai_api_key\n# OR\nANTHROPIC_API_KEY=sk-ant-your_anthropic_api_key\n\n# Optional Security\nGITHUB_WEBHOOK_SECRET=your_webhook_secret\nSECRET_KEY=your_app_secret_key\n```\n\n### 2. GitHub Token Setup\n\nCreate a GitHub Personal Access Token with these permissions:\n- `repo` - Full repository access\n- `pull_requests:write` - Create reviews and comments  \n- `metadata:read` - Read repository metadata\n\n## \ud83c\udfaf **Start the Agent**\n\n### Option 1: Quick Start Script\n```bash\n./scripts/start.sh\n```\n\n### Option 2: Manual Start\n```bash\n# Test everything works\nuv run python scripts/quick_test.py\n\n# Start the webhook server\nuv run junior webhook-server --port 8000\n```\n\n### Option 3: Direct FastAPI\n```bash\nuv run uvicorn src.junior.api:app --host 0.0.0.0 --port 8000\n```\n\n## \ud83d\udd0c **GitHub Webhook Configuration**\n\n1. Go to your repository \u2192 **Settings** \u2192 **Webhooks** \u2192 **Add webhook**\n\n2. Configure webhook:\n   ```\n   Payload URL: https://your-server.com/webhook/github\n   Content Type: application/json\n   Secret: your_webhook_secret (optional but recommended)\n   Events: \u2705 Pull requests\n   Active: \u2705 Active\n   ```\n\n3. Test webhook:\n   - Create a test PR\n   - Check webhook deliveries in GitHub\n   - Check your server logs\n\n## \ud83d\udcca **Available Endpoints**\n\n| Endpoint | Method | Purpose |\n|----------|--------|---------|\n| `/health` | GET | Health check - always works |\n| `/ready` | GET | Readiness check - requires GitHub token |\n| `/webhook/github` | POST | Main webhook endpoint for PR events |\n| `/review` | POST | Manual review endpoint (debug mode only) |\n\n## \ud83e\uddea **Testing Commands**\n\n```bash\n# Test all imports and basic functionality\nuv run python scripts/quick_test.py\n\n# Test complete end-to-end flow (with mocks)\nuv run python scripts/test_complete_flow.py\n\n# Test webhook with realistic data (requires running server)\nuv run python scripts/test_webhook_simple.py\n\n# Test health endpoint\ncurl http://localhost:8000/health\n\n# Test readiness (requires GITHUB_TOKEN)\ncurl http://localhost:8000/ready\n\n# Check configuration and API connectivity\nuv run junior config-check\n\n# View all available CLI commands\nuv run junior --help\n```\n\n## \ud83d\udd0d **Execution Flow Verified**\n\n\u2705 **1. Webhook Reception** (`/webhook/github`)\n- Receives GitHub PR events\n- Validates payload structure\n- Verifies webhook signature (if configured)\n- Filters for relevant events (opened, synchronize, ready_for_review)\n\n\u2705 **2. PR Data Extraction** (`WebhookProcessor`)\n- Extracts comprehensive PR metadata\n- Parses linked issues (`fixes #123`)\n- Collects commit history and file changes\n- Gathers repository context\n\n\u2705 **3. Repository Analysis** (`MCPRepositoryAnalyzer`)\n- Clones repository to temporary directory\n- Analyzes project structure (Python, Node.js, etc.)\n- Prioritizes files: changed \u2192 config \u2192 context \u2192 entry points\n- Extracts relevant file contents with smart limits\n\n\u2705 **4. AI Review Pipeline** (`LogicalReviewAgent`)\n- **Logic Analysis**: Business logic, conditional flows, edge cases\n- **Security Review**: Authentication logic, business vulnerabilities\n- **Critical Bug Detection**: Memory safety, race conditions, zero-day potential\n- **Naming Review**: Semantic clarity, domain appropriateness\n- **Optimization Analysis**: Performance bottlenecks, algorithmic improvements\n- **Design Principles**: DRY, KISS, SOLID adherence\n\n\u2705 **5. GitHub Integration** (`GitHubClient`)\n- Formats review summary with severity breakdown\n- Creates inline comments (max 20 most critical)\n- Submits review with appropriate status (approve/request_changes/comment)\n\n## \ud83d\udcdd **Sample Review Output**\n\nJunior will post reviews like this:\n\n```markdown\n## \ud83e\udd16 Junior Code Review\n\nThis PR introduces new authentication logic with a few concerns around error handling and security.\n\n\ud83d\udcca **Findings Summary**: 3 total \u2022 \ud83d\udd34 1 critical \u2022 \ud83d\udfe1 2 medium\n\n---\n*Reviewed by Junior AI Agent - Focusing on logic, security, and code quality*\n```\n\nPlus inline comments on specific lines with suggestions.\n\n## \ud83d\udea8 **Review Focus Areas**\n\nJunior specializes in **logical analysis**, not linting:\n\n**\u2705 What Junior Reviews:**\n- Business logic correctness\n- Security vulnerabilities (logical)\n- Critical bugs and race conditions\n- Naming semantics and clarity\n- Performance bottlenecks\n- Design principle violations\n\n**\u274c What Junior Ignores:**\n- Code formatting (use Prettier/Black)\n- Syntax errors (use your IDE)\n- Style guide violations (use ESLint/Ruff)\n- Dependency vulnerabilities (use Dependabot)\n\n## \ud83d\udc33 **Docker Deployment**\n\n```bash\n# Build and run\ndocker build -t junior .\ndocker run -p 8000:8000 --env-file .env junior\n\n# Or use docker-compose\ndocker-compose up -d\n```\n\n## \u2638\ufe0f **Kubernetes Deployment**\n\n```bash\n# Deploy to k8s\nhelm install junior helm/junior \\\n  --set secrets.githubToken=\"$GITHUB_TOKEN\" \\\n  --set secrets.openaiApiKey=\"$OPENAI_API_KEY\"\n```\n\n## \ud83c\udf89 **You're Ready!**\n\nYour Junior agent is now:\n- \u2705 **Tested**: All components working\n- \u2705 **Optimized**: Clean, focused codebase  \n- \u2705 **Production-Ready**: Proper error handling and logging\n- \u2705 **Documented**: Clear setup and usage instructions\n\nJust add your API keys and start reviewing PRs! \ud83d\ude80",
        "pyproject.toml": "[project]\nname = \"junior\"\nversion = \"0.1.0\"\ndescription = \"AI Agent for reviewing code and pull requests\"\nauthors = [\n    {name = \"Your Name\", email = \"your.email@example.com\"}\n]\nreadme = \"README.md\"\nlicense = {text = \"MIT\"}\nrequires-python = \">=3.11\"\nkeywords = [\"ai\", \"code-review\", \"langchain\", \"langraph\", \"automation\"]\nclassifiers = [\n    \"Development Status :: 3 - Alpha\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Topic :: Software Development :: Quality Assurance\",\n    \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n]\n\ndependencies = [\n    \"langchain>=0.1.0\",\n    \"langchain-openai>=0.1.0\",\n    \"langchain-anthropic>=0.1.0\",\n    \"langchain-community>=0.1.0\",\n    \"langgraph>=0.1.0\",\n    \"pydantic>=2.5.0\",\n    \"pydantic-settings>=2.0.0\",\n    \"aiohttp>=3.9.0\",\n    \"httpx>=0.25.0\",\n    \"python-dotenv>=1.0.0\",\n    \"structlog>=23.2.0\",\n    \"typer>=0.9.0\",\n    \"rich>=13.7.0\",\n    \"PyGithub>=2.1.0\",\n    \"gitpython>=3.1.0\",\n    \"diff-match-patch>=20230430\",\n    \"fastapi>=0.104.0\",\n    \"uvicorn>=0.24.0\",\n    \"mcp>=1.0.0\",\n    \"asyncio-throttle>=1.0.0\",\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest>=7.4.0\",\n    \"pytest-asyncio>=0.21.0\",\n    \"pytest-cov>=4.1.0\",\n    \"pytest-mock>=3.12.0\",\n    \"black>=23.12.0\",\n    \"isort>=5.13.0\",\n    \"flake8>=6.1.0\",\n    \"mypy>=1.8.0\",\n    \"pre-commit>=3.6.0\",\n    \"ruff>=0.1.0\",\n]\n\ntest = [\n    \"pytest>=7.4.0\",\n    \"pytest-asyncio>=0.21.0\",\n    \"pytest-cov>=4.1.0\",\n    \"pytest-mock>=3.12.0\",\n]\n\n[project.scripts]\njunior = \"junior.cli:main\"\n\n[project.urls]\nHomepage = \"https://github.com/yourusername/junior\"\nDocumentation = \"https://github.com/yourusername/junior#readme\"\nRepository = \"https://github.com/yourusername/junior\"\nIssues = \"https://github.com/yourusername/junior/issues\"\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[tool.hatch.build.targets.wheel]\npackages = [\"src/junior\"]\n\n[tool.black]\nline-length = 88\ntarget-version = ['py311']\ninclude = '\\.pyi?$'\nextend-exclude = '''\n/(\n  # directories\n  \\.eggs\n  | \\.git\n  | \\.hg\n  | \\.mypy_cache\n  | \\.tox\n  | \\.venv\n  | _build\n  | buck-out\n  | build\n  | dist\n)/\n'''\n\n[tool.isort]\nprofile = \"black\"\nmulti_line_output = 3\nline_length = 88\nknown_first_party = [\"junior\"]\n\n[tool.mypy]\npython_version = \"3.11\"\nwarn_return_any = true\nwarn_unused_configs = true\ndisallow_untyped_defs = true\ndisallow_incomplete_defs = true\ncheck_untyped_defs = true\ndisallow_untyped_decorators = true\nno_implicit_optional = true\nwarn_redundant_casts = true\nwarn_unused_ignores = true\nwarn_no_return = true\nwarn_unreachable = true\nstrict_equality = true\n\n[[tool.mypy.overrides]]\nmodule = [\n    \"langchain.*\",\n    \"langraph.*\",\n    \"github.*\",\n    \"git.*\",\n    \"diff_match_patch.*\",\n]\nignore_missing_imports = true\n\n[tool.pytest.ini_options]\nminversion = \"7.0\"\naddopts = \"-ra -q --strict-markers --strict-config\"\ntestpaths = [\"tests\"]\npython_files = [\"test_*.py\", \"*_test.py\"]\npython_classes = [\"Test*\"]\npython_functions = [\"test_*\"]\nmarkers = [\n    \"unit: marks tests as unit tests\",\n    \"integration: marks tests as integration tests\",\n    \"slow: marks tests as slow running\",\n]\n\n[tool.coverage.run]\nsource = [\"src\"]\nomit = [\n    \"*/tests/*\",\n    \"*/test_*\",\n    \"*/__pycache__/*\",\n]\n\n[tool.coverage.report]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"def __repr__\",\n    \"if self.debug:\",\n    \"if settings.DEBUG\",\n    \"raise AssertionError\",\n    \"raise NotImplementedError\",\n    \"if 0:\",\n    \"if __name__ == .__main__.:\",\n    \"class .*\\\\bProtocol\\\\):\",\n    \"@(abc\\\\.)?abstractmethod\",\n]\n\n[tool.ruff]\ntarget-version = \"py311\"\nline-length = 88\nselect = [\n    \"E\",  # pycodestyle errors\n    \"W\",  # pycodestyle warnings\n    \"F\",  # pyflakes\n    \"I\",  # isort\n    \"B\",  # flake8-bugbear\n    \"C4\", # flake8-comprehensions\n    \"UP\", # pyupgrade\n]\nignore = [\n    \"E501\",  # line too long, handled by black\n    \"B008\",  # do not perform function calls in argument defaults\n    \"C901\",  # too complex\n]\n\n[tool.ruff.per-file-ignores]\n\"__init__.py\" = [\"F401\"]\n\"tests/**/*\" = [\"B011\"]",
        ".dockerignore": "# Git\n.git\n.gitignore\n\n# Python\n__pycache__\n*.pyc\n*.pyo\n*.pyd\n.Python\nbuild\ndevelop-eggs\ndist\ndownloads\neggs\n.eggs\nlib\nlib64\nparts\nsdist\nvar\nwheels\n*.egg-info\n.installed.cfg\n*.egg\n\n# Virtual environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Testing\n.pytest_cache\n.coverage\nhtmlcov/\n.tox/\n.nox/\n\n# IDE\n.vscode/\n.idea/\n*.swp\n*.swo\n\n# OS\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n\n# Logs\n*.log\nlogs/\n\n# Temporary files\ntemp/\ntmp/\n.tmp/\n\n# Documentation\ndocs/\n*.md\n!README.md\n\n# CI/CD\n.github/\n\n# Junior specific\njunior.db\n.junior/",
        ".gitignore": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[codz]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py.cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# UV\n#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#uv.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n#poetry.toml\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.\n#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control\n#pdm.lock\n#pdm.toml\n.pdm-python\n.pdm-build/\n\n# pixi\n#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.\n#pixi.lock\n#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one\n#   in the .venv directory. It is recommended not to include this directory in version control.\n.pixi\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.envrc\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\n# Abstra\n# Abstra is an AI-powered process automation framework.\n# Ignore directories containing user credentials, local state, and settings.\n# Learn more at https://abstra.io/docs\n.abstra/\n\n# Visual Studio Code\n#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore \n#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore\n#  and can be added to the global gitignore or merged into this file. However, if you prefer, \n#  you could uncomment the following to ignore the entire vscode folder\n# .vscode/\n\n# Ruff stuff:\n.ruff_cache/\n\n# PyPI configuration file\n.pypirc\n\n# Cursor\n#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to\n#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data\n#  refer to https://docs.cursor.com/context/ignore-files\n.cursorignore\n.cursorindexingignore\n\n# Marimo\nmarimo/_static/\nmarimo/_lsp/\n__marimo__/\n\n# Junior specific\njunior.db\nlogs/\ntemp/\n.junior/\n",
        "docker-compose.yml": "version: '3.8'\n\nservices:\n  junior:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: junior\n    environment:\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}\n      - GITHUB_TOKEN=${GITHUB_TOKEN}\n      - SECRET_KEY=${SECRET_KEY}\n      - LOG_LEVEL=${LOG_LEVEL:-INFO}\n      - DEBUG=${DEBUG:-false}\n      - DATABASE_URL=postgresql://junior:junior@postgres:5432/junior\n    env_file:\n      - .env\n    volumes:\n      - ./logs:/app/logs\n      - ./data:/app/data\n    networks:\n      - junior-network\n    depends_on:\n      - postgres\n      - redis\n    restart: unless-stopped\n\n  postgres:\n    image: postgres:16-alpine\n    container_name: junior-postgres\n    environment:\n      - POSTGRES_DB=junior\n      - POSTGRES_USER=junior\n      - POSTGRES_PASSWORD=junior\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    networks:\n      - junior-network\n    restart: unless-stopped\n\n  redis:\n    image: redis:7-alpine\n    container_name: junior-redis\n    volumes:\n      - redis_data:/data\n    networks:\n      - junior-network\n    restart: unless-stopped\n\n  # Webhook API service (main service)\n  webhook-api:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: junior-webhook-api\n    environment:\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}\n      - GITHUB_TOKEN=${GITHUB_TOKEN}\n      - GITHUB_WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET}\n      - SECRET_KEY=${SECRET_KEY}\n      - LOG_LEVEL=${LOG_LEVEL:-INFO}\n      - DEBUG=${DEBUG:-false}\n      - DATABASE_URL=postgresql://junior:junior@postgres:5432/junior\n      - API_HOST=0.0.0.0\n      - API_PORT=8000\n      - MAX_FILES_PER_PR=${MAX_FILES_PER_PR:-50}\n      - REVIEW_TIMEOUT=${REVIEW_TIMEOUT:-300}\n      - ENABLE_SECURITY_CHECKS=${ENABLE_SECURITY_CHECKS:-true}\n      - ENABLE_PERFORMANCE_CHECKS=${ENABLE_PERFORMANCE_CHECKS:-true}\n      - ENABLE_STYLE_CHECKS=${ENABLE_STYLE_CHECKS:-true}\n      - ENABLE_COMPLEXITY_CHECKS=${ENABLE_COMPLEXITY_CHECKS:-true}\n    env_file:\n      - .env\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - ./logs:/app/logs\n      - ./temp:/app/temp\n    networks:\n      - junior-network\n    depends_on:\n      - postgres\n      - redis\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n\nvolumes:\n  postgres_data:\n  redis_data:\n\nnetworks:\n  junior-network:\n    driver: bridge",
        ".env.example": "# AI Provider Configuration\nOPENAI_API_KEY=your_openai_api_key_here\nANTHROPIC_API_KEY=your_anthropic_api_key_here\n\n# GitHub Configuration\nGITHUB_TOKEN=your_github_token_here\nGITHUB_WEBHOOK_SECRET=your_webhook_secret_here\n\n# Webhook Configuration\nMAX_FILES_PER_PR=50\nREVIEW_TIMEOUT=300\n\n# Application Configuration\nLOG_LEVEL=INFO\nDEBUG=false\n\n# Database (optional)\nDATABASE_URL=sqlite:///junior.db\n\n# API Configuration\nAPI_HOST=0.0.0.0\nAPI_PORT=8000\n\n# Security\nSECRET_KEY=your_secret_key_here",
        "CLAUDE.md": "# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## Common Development Commands\n\n### Environment Setup\n```bash\n# Install dependencies with uv (required)\nuv sync --all-extras\n\n# Copy environment template and configure\ncp .env.example .env\n# Edit .env with required API keys: GITHUB_TOKEN, SECRET_KEY, and either OPENAI_API_KEY or ANTHROPIC_API_KEY\n```\n\n### Testing\n```bash\n# Run all tests\nuv run pytest\n\n# Run specific test file\nuv run pytest tests/test_api.py\n\n# Run with coverage\nuv run pytest --cov=src/junior --cov-report=xml --cov-report=term-missing\n\n# Run specific test markers\nuv run pytest -m unit\nuv run pytest -m integration\n```\n\n### Code Quality\n```bash\n# Linting and formatting\nuv run ruff check .\nuv run ruff format .\n\n# Type checking\nuv run mypy src/\n\n# Pre-commit hooks (run all checks)\nuv run pre-commit run --all-files\n```\n\n### Running the Application\n```bash\n# Start webhook server (main service)\njunior webhook-server --port 8000\n# OR\npython -m junior.api\n\n# CLI commands for manual testing\njunior review-pr owner/repo 123\njunior review-local --base main\njunior config-check\n\n# Quick start script\n./scripts/start.sh\n```\n\n### Docker\n```bash\n# Build and run with compose\ndocker-compose up -d\n\n# Build standalone image\ndocker build -t junior .\n```\n\n## Architecture Overview\n\nJunior is a webhook-based AI code review agent with two distinct processing paths:\n\n### Core Components Architecture\n\n**Service Layer:**\n- `api.py` - FastAPI webhook service that receives GitHub PR events and orchestrates reviews\n- `webhook.py` - GitHub webhook processing and validation logic\n- `cli.py` - Command-line interface for manual operations\n\n**AI Review Pipeline:**\n- `review_agent.py` - Specialized AI agent implementing logical review workflow via LangGraph\n- `agent.py` - Original general-purpose review agent (legacy, kept for CLI operations)\n- Both agents use structured LangGraph workflows but focus on different review criteria\n\n**Repository Analysis:**\n- `mcp_tools.py` - MCP (Model Context Protocol) integration for deep repository analysis\n- `repository_analyzer.py` - Orchestrates repo structure analysis and context enrichment\n- `github_client.py` / `git_client.py` - GitHub API and local Git operations\n\n**Data Layer:**\n- `models.py` - Pydantic models for all data structures with extensive enum definitions\n- `config.py` - Centralized configuration via Pydantic Settings with environment variable mapping\n\n### Review Focus Areas\n\nThe system specifically targets logical and architectural issues, NOT linting:\n\n**Primary Review Categories** (in `models.ReviewCategory`):\n- `LOGIC` - Business logic, conditional flows, edge cases\n- `SECURITY` - Authentication flows, authorization logic, business logic vulnerabilities\n- `CRITICAL_BUG` - Memory safety, race conditions, zero-day potential\n- `NAMING` - Semantic clarity, domain appropriateness (not style guide compliance)\n- `OPTIMIZATION` - Algorithmic efficiency, performance bottlenecks\n- `DRY_VIOLATION` / `KISS_VIOLATION` - Design principle adherence\n\n### Webhook Processing Flow\n\n1. **GitHub Event Reception** (`api.py` `/webhook/github`)\n   - Signature verification via HMAC\n   - Event filtering (only PR opens/updates/ready-for-review)\n   - Background task queuing\n\n2. **Repository Analysis** (`mcp_tools.py` + `repository_analyzer.py`)\n   - Temporary repo cloning\n   - Project structure detection (Python/Node.js/Java/etc.)\n   - Risk factor assessment (security files, config changes, etc.)\n   - File content extraction with smart filtering\n\n3. **AI Review Pipeline** (`review_agent.py` LangGraph workflow)\n   - Logic analysis \u2192 Security review \u2192 Critical bug detection \u2192 Naming review \u2192 Optimization \u2192 Design principles\n   - Each step uses specialized prompts and JSON-structured responses\n   - Findings aggregated with severity levels\n\n4. **GitHub Integration** (back to `api.py`)\n   - Review summary formatting\n   - Inline comment posting (limited to 20 per PR)\n   - Review submission with approve/request-changes/comment status\n\n### Configuration Strategy\n\nAll configuration via environment variables through `config.py`:\n- AI provider keys (OpenAI/Anthropic) - at least one required\n- GitHub integration (token + optional webhook secret)\n- Review behavior toggles (enable/disable specific check types)\n- Processing limits (max files per PR, timeouts)\n\n### Testing Strategy\n\nTest structure mirrors src/ with comprehensive mocking:\n- `conftest.py` provides fixtures for common objects (mock clients, sample data)\n- Heavy use of `pytest-mock` for async operations and external API calls\n- Integration tests marked with `@pytest.mark.integration`\n- Test data uses realistic GitHub webhook payloads and git diffs\n\n### MCP Integration Pattern\n\nThe `mcp_tools.py` implements repository analysis without external MCP servers:\n- Direct git operations via GitPython\n- File system analysis with smart filtering by extension/size\n- Project type detection via configuration files (package.json, pyproject.toml, etc.)\n- Throttled file reading (10 ops/second) to prevent resource exhaustion\n\nKey architectural principle: The system maintains separation between the general-purpose review agent (for CLI use) and the specialized logical review agent (for webhook automation), allowing different review criteria and workflows while sharing common infrastructure.\n\n\n### Additional\n- Ignore \"helm\" folder\n"
    },
    "project_structure": {
        "project_type": "python",
        "main_language": "python",
        "frameworks": [
            "fastapi"
        ],
        "dependencies": {},
        "directory_structure": {
            "": 1,
            ".toml": 1,
            "tests": {
                ".py": 8
            },
            ".md": 3,
            "scripts": {
                ".py": 2,
                ".sh": 1
            },
            ".yml": 1,
            "helm": {
                "junior": {
                    ".yaml": 2,
                    "templates": {}
                }
            },
            "src": {
                "junior": {
                    ".py": 11
                }
            }
        },
        "config_files": [
            "pyproject.toml",
            ".dockerignore",
            ".gitignore",
            "docker-compose.yml"
        ],
        "test_directories": [
            "tests"
        ],
        "documentation_files": [
            "README.md"
        ],
        "build_files": [],
        "ci_files": [
            ".github/workflows/deploy.yml",
            ".github/workflows/ci.yml"
        ]
    }
}