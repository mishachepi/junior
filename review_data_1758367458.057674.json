{
    "review_data": {
        "repository": "mishachepi/junior",
        "pr_number": 7,
        "title": "chore",
        "description": null,
        "author": "makeProjectGreatAgain",
        "author_id": 24358142,
        "base_branch": "main",
        "head_branch": "main",
        "base_sha": "891c60d10ace4f7bf6296aca744cb30a8d2d1696",
        "head_sha": "8443051dd39fead7ec42c313b16aa55130b3a844",
        "diff_url": "https://github.com/mishachepi/junior/pull/7.diff",
        "patch_url": "https://github.com/mishachepi/junior/pull/7.patch",
        "pr_url": "https://github.com/mishachepi/junior/pull/7",
        "issue_url": "https://api.github.com/repos/mishachepi/junior/issues/7",
        "clone_url": "https://github.com/mishachepi/junior.git",
        "ssh_url": "git@github.com:mishachepi/junior.git",
        "default_branch": "main",
        "language": "Python",
        "size": 87,
        "is_private": false,
        "repo_description": "Code reviewer",
        "created_at": "2025-09-20T15:21:49Z",
        "updated_at": "2025-09-20T15:21:49Z",
        "closed_at": null,
        "merged_at": null,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "state": "open",
        "draft": false,
        "mergeable": null,
        "mergeable_state": "unknown",
        "merged": false,
        "merge_commit_sha": null,
        "commits": [],
        "commits_count": 0,
        "linked_issues": [],
        "milestone": null,
        "labels": [],
        "new_label": null,
        "requested_reviewers": [],
        "assignees": [],
        "action": "opened",
        "sender": "makeProjectGreatAgain",
        "webhook_received_at": "2025-09-20T15:23:55.576683"
    },
    "diff_content": "diff --git a/.gitignore b/.gitignore\nindex 4716b09..7e56f02 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -211,3 +211,4 @@ junior.db\n logs/\n temp/\n .junior/\n+tmp/\n",
    "file_contents": {
        ".gitignore": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[codz]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py.cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# UV\n#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#uv.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n#poetry.toml\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.\n#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control\n#pdm.lock\n#pdm.toml\n.pdm-python\n.pdm-build/\n\n# pixi\n#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.\n#pixi.lock\n#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one\n#   in the .venv directory. It is recommended not to include this directory in version control.\n.pixi\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.envrc\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\n# Abstra\n# Abstra is an AI-powered process automation framework.\n# Ignore directories containing user credentials, local state, and settings.\n# Learn more at https://abstra.io/docs\n.abstra/\n\n# Visual Studio Code\n#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore \n#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore\n#  and can be added to the global gitignore or merged into this file. However, if you prefer, \n#  you could uncomment the following to ignore the entire vscode folder\n# .vscode/\n\n# Ruff stuff:\n.ruff_cache/\n\n# PyPI configuration file\n.pypirc\n\n# Cursor\n#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to\n#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data\n#  refer to https://docs.cursor.com/context/ignore-files\n.cursorignore\n.cursorindexingignore\n\n# Marimo\nmarimo/_static/\nmarimo/_lsp/\n__marimo__/\n\n# Junior specific\njunior.db\nlogs/\ntemp/\n.junior/\ntmp/\n",
        ".vscode/launch.json": "{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Debug Integration Test\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"module\": \"pytest\",\n            \"args\": [\n                \"tests/test_integration.py::test_post_review_comment_integration\",\n                \"-v\",\n                \"-s\",\n                \"--no-cov\"\n            ],\n            \"console\": \"integratedTerminal\",\n            \"justMyCode\": false,\n            \"env\": {\n                \"PYTHONPATH\": \"${workspaceFolder}/src\"\n            }\n        },\n        {\n            \"name\": \"Debug Specific Test (with breakpoint)\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}/tests/test_integration.py\",\n            \"args\": [],\n            \"console\": \"integratedTerminal\",\n            \"justMyCode\": false,\n            \"env\": {\n                \"PYTHONPATH\": \"${workspaceFolder}/src\"\n            },\n            \"stopOnEntry\": false\n        },\n        {\n            \"name\": \"Python: Current File\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \"${file}\",\n            \"console\": \"integratedTerminal\",\n            \"justMyCode\": false\n        }\n    ]\n}",
        "CLAUDE.md": "# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## Common Development Commands\n\n### Environment Setup\n```bash\n# Install dependencies with uv (required)\nuv sync --all-extras\n\n# Copy environment template and configure\ncp .env.example .env\n# Edit .env with required API keys: GITHUB_TOKEN, SECRET_KEY, and either OPENAI_API_KEY or ANTHROPIC_API_KEY\n```\n\n### Testing\n```bash\n# Run all tests\nuv run pytest\n\n# Run specific test file\nuv run pytest tests/test_api.py\n\n# Run with coverage\nuv run pytest --cov=src/junior --cov-report=xml --cov-report=term-missing\n\n# Run specific test markers\nuv run pytest -m unit\nuv run pytest -m integration\n```\n\n### Code Quality\n```bash\n# Linting and formatting\nuv run ruff check .\nuv run ruff format .\n\n# Type checking\nuv run mypy src/\n\n# Pre-commit hooks (run all checks)\nuv run pre-commit run --all-files\n```\n\n### Running the Application\n```bash\n# Start webhook server (main service)\njunior webhook-server --port 8000\n# OR\npython -m junior.api\n\n# CLI commands for manual testing\njunior review-pr owner/repo 123\njunior review-local --base main\njunior config-check\n\n# Quick start script\n./scripts/start.sh\n```\n\n### Docker\n```bash\n# Build and run with compose\ndocker-compose up -d\n\n# Build standalone image\ndocker build -t junior .\n```\n\n## Architecture Overview\n\nJunior is a webhook-based AI code review agent with two distinct processing paths:\n\n### Core Components Architecture\n\n**Service Layer:**\n- `api.py` - FastAPI webhook service that receives GitHub PR events and orchestrates reviews\n- `webhook.py` - GitHub webhook processing and validation logic\n- `cli.py` - Command-line interface for manual operations\n\n**AI Review Pipeline:**\n- `review_agent.py` - Specialized AI agent implementing logical review workflow via LangGraph\n- `agent.py` - Original general-purpose review agent (legacy, kept for CLI operations)\n- Both agents use structured LangGraph workflows but focus on different review criteria\n\n**Repository Analysis:**\n- `mcp_tools.py` - MCP (Model Context Protocol) integration for deep repository analysis\n- `repository_analyzer.py` - Orchestrates repo structure analysis and context enrichment\n- `github_client.py` / `git_client.py` - GitHub API and local Git operations\n\n**Data Layer:**\n- `models.py` - Pydantic models for all data structures with extensive enum definitions\n- `config.py` - Centralized configuration via Pydantic Settings with environment variable mapping\n\n### Review Focus Areas\n\nThe system specifically targets logical and architectural issues, NOT linting:\n\n**Primary Review Categories** (in `models.ReviewCategory`):\n- `LOGIC` - Business logic, conditional flows, edge cases\n- `SECURITY` - Authentication flows, authorization logic, business logic vulnerabilities\n- `CRITICAL_BUG` - Memory safety, race conditions, zero-day potential\n- `NAMING` - Semantic clarity, domain appropriateness (not style guide compliance)\n- `OPTIMIZATION` - Algorithmic efficiency, performance bottlenecks\n- `DRY_VIOLATION` / `KISS_VIOLATION` - Design principle adherence\n\n### Webhook Processing Flow\n\n1. **GitHub Event Reception** (`api.py` `/webhook/github`)\n   - Signature verification via HMAC\n   - Event filtering (only PR opens/updates/ready-for-review)\n   - Background task queuing\n\n2. **Repository Analysis** (`mcp_tools.py` + `repository_analyzer.py`)\n   - Temporary repo cloning\n   - Project structure detection (Python/Node.js/Java/etc.)\n   - Risk factor assessment (security files, config changes, etc.)\n   - File content extraction with smart filtering\n\n3. **AI Review Pipeline** (`review_agent.py` LangGraph workflow)\n   - Logic analysis \u2192 Security review \u2192 Critical bug detection \u2192 Naming review \u2192 Optimization \u2192 Design principles\n   - Each step uses specialized prompts and JSON-structured responses\n   - Findings aggregated with severity levels\n\n4. **GitHub Integration** (back to `api.py`)\n   - Review summary formatting\n   - Inline comment posting (limited to 20 per PR)\n   - Review submission with approve/request-changes/comment status\n\n### Configuration Strategy\n\nAll configuration via environment variables through `config.py`:\n- AI provider keys (OpenAI/Anthropic) - at least one required\n- GitHub integration (token + optional webhook secret)\n- Review behavior toggles (enable/disable specific check types)\n- Processing limits (max files per PR, timeouts)\n\n### Testing Strategy\n\nTest structure mirrors src/ with comprehensive mocking:\n- `conftest.py` provides fixtures for common objects (mock clients, sample data)\n- Heavy use of `pytest-mock` for async operations and external API calls\n- Integration tests marked with `@pytest.mark.integration`\n- Test data uses realistic GitHub webhook payloads and git diffs\n\n### MCP Integration Pattern\n\nThe `mcp_tools.py` implements repository analysis without external MCP servers:\n- Direct git operations via GitPython\n- File system analysis with smart filtering by extension/size\n- Project type detection via configuration files (package.json, pyproject.toml, etc.)\n- Throttled file reading (10 ops/second) to prevent resource exhaustion\n\nKey architectural principle: The system maintains separation between the general-purpose review agent (for CLI use) and the specialized logical review agent (for webhook automation), allowing different review criteria and workflows while sharing common infrastructure.\n\n\n### Additional\n- Ignore \"helm\" folder\n",
        "src/junior/api.py": "\"\"\"FastAPI application for Junior webhook service.\"\"\"\n\nimport asyncio\nimport json\nfrom datetime import datetime\nfrom typing import Dict, Optional\n\nimport structlog\nfrom fastapi import BackgroundTasks, FastAPI, HTTPException, Request, status\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.responses import JSONResponse\n\nfrom .config import settings\nfrom .github_client import GitHubClient\nfrom .mcp_tools import MCPRepositoryAnalyzer\nfrom .review_agent import LogicalReviewAgent\nfrom .webhook import PullRequestWebhookPayload, WebhookProcessor\n\n# Configure logging\nimport logging\n\nstructlog.configure(\n    processors=[\n        structlog.processors.TimeStamper(fmt=\"iso\"),\n        structlog.dev.ConsoleRenderer() if settings.debug else structlog.processors.JSONRenderer()\n    ],\n    wrapper_class=structlog.make_filtering_bound_logger(\n        getattr(logging, settings.log_level.upper())\n    ),\n    logger_factory=structlog.WriteLoggerFactory(),\n    cache_logger_on_first_use=True,\n)\n\nlogger = structlog.get_logger(__name__)\n\n# Initialize FastAPI app\napp = FastAPI(\n    title=\"Junior - AI Code Review Agent\",\n    description=\"Webhook-based AI agent for comprehensive code review\",\n    version=\"0.1.0\",\n    docs_url=\"/docs\" if settings.debug else None,\n    redoc_url=\"/redoc\" if settings.debug else None,\n)\n\n# Add CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"] if settings.debug else [],\n    allow_credentials=True,\n    allow_methods=[\"GET\", \"POST\"],\n    allow_headers=[\"*\"],\n)\n\n# Initialize services (lazy-loaded to avoid config issues)\nwebhook_processor = WebhookProcessor()\n\ndef get_github_client():\n    \"\"\"Get GitHub client instance.\"\"\"\n    if not settings.github_token:\n        raise ValueError(\"GitHub token is required\")\n    return GitHubClient()\n\ndef get_review_agent():\n    \"\"\"Get review agent instance.\"\"\"\n    return LogicalReviewAgent()\n\ndef get_mcp_analyzer():\n    \"\"\"Get MCP analyzer instance.\"\"\" \n    return MCPRepositoryAnalyzer()\n\n\n@app.get(\"/health\")\nasync def health_check():\n    \"\"\"Health check endpoint.\"\"\"\n    return {\"status\": \"healthy\", \"service\": \"junior-webhook\"}\n\n\n@app.get(\"/ready\")\nasync def readiness_check():\n    \"\"\"Readiness check endpoint.\"\"\"\n    try:\n        # Quick check of dependencies\n        await get_github_client().get_authenticated_user()\n        return {\"status\": \"ready\", \"service\": \"junior-webhook\"}\n    except Exception as e:\n        logger.error(\"Readiness check failed\", error=str(e))\n        raise HTTPException(\n            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,\n            detail=\"Service not ready\"\n        )\n\n\n@app.post(\"/webhook/github\")\nasync def github_webhook(request: Request, background_tasks: BackgroundTasks):\n    \"\"\"Handle GitHub webhook events.\"\"\"\n    try:\n        # Get raw payload for signature verification\n        payload_bytes = await request.body()\n        \n        # Verify webhook signature\n        if not await webhook_processor.verify_signature(request, payload_bytes):\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Invalid webhook signature\"\n            )\n        \n        # Parse payload\n        payload_json = json.loads(payload_bytes.decode(\"utf-8\"))\n        \n        # Check if it's a pull request event\n        if \"pull_request\" not in payload_json:\n            return {\"message\": \"Not a pull request event, ignoring\"}\n        \n        # Validate payload structure\n        webhook_payload = PullRequestWebhookPayload(**payload_json)\n        \n        # Check if we should process this event\n        if not webhook_processor.should_process_event(webhook_payload):\n            return {\"message\": f\"Skipping action: {webhook_payload.action}\"}\n        \n        # Extract review data\n        review_data = webhook_processor.extract_review_data(webhook_payload)\n        review_data[\"webhook_received_at\"] = datetime.utcnow().isoformat()\n        \n        # Process review in background\n        background_tasks.add_task(process_pr_review, review_data)\n        \n        return {\n            \"message\": \"PR review queued\",\n            \"repository\": review_data[\"repository\"],\n            \"pr_number\": review_data[\"pr_number\"],\n            \"action\": webhook_payload.action\n        }\n        \n    except json.JSONDecodeError:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Invalid JSON payload\"\n        )\n    except Exception as e:\n        logger.error(\"Webhook processing failed\", error=str(e))\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"Internal server error\"\n        )\n\n\nasync def process_pr_review(review_data: Dict):\n    \"\"\"Process PR review in background.\"\"\"\n    repository = review_data[\"repository\"]\n    pr_number = review_data[\"pr_number\"]\n    \n    logger.info(\"Starting PR review\", repo=repository, pr=pr_number)\n    \n    try:\n        # Step 1: Get diff content\n        diff_content = await get_pr_diff(repository, pr_number)\n        \n        # Step 2: Get file contents and project structure\n        file_contents, project_structure = await analyze_repository(\n            repository, \n            review_data[\"head_sha\"],\n            review_data[\"base_sha\"]\n        )\n        \n        # Step 3: Perform AI review\n        review_agent = get_review_agent()\n        review_result = await review_agent.review_pull_request(\n            review_data=review_data,\n            diff_content=diff_content,\n            file_contents=file_contents,\n            project_structure=project_structure\n        )\n        \n        # Step 4: Post review to GitHub\n        await post_review_to_github(repository, pr_number, review_result)\n        \n        logger.info(\"PR review completed\", \n                   repo=repository, \n                   pr=pr_number,\n                   findings=review_result[\"total_findings\"])\n        \n    except Exception as e:\n        logger.error(\"PR review failed\", \n                    repo=repository, \n                    pr=pr_number, \n                    error=str(e))\n        \n        # Post error comment to PR\n        try:\n            github_client = get_github_client()\n            await github_client.post_review_comment(\n                repository, \n                pr_number,\n                f\"\u274c **Junior Review Failed**\\n\\nI encountered an error while reviewing this PR: {str(e)}\\n\\nPlease check the service logs for more details.\"\n            )\n        except Exception as comment_error:\n            logger.error(\"Failed to post error comment\", error=str(comment_error))\n\n\nasync def get_pr_diff(repository: str, pr_number: int) -> str:\n    \"\"\"Get the diff content for a PR.\"\"\"\n    try:\n        # Get PR data\n        github_client = get_github_client()\n        pr_data = await github_client.get_pull_request(repository, pr_number)\n        \n        # Fetch diff content with proper authentication\n        import httpx\n        headers = {\n            \"Accept\": \"application/vnd.github.v3.diff\",\n            \"User-Agent\": \"Junior-AI-Review-Agent/1.0\"\n        }\n        \n        # Add GitHub token for authentication\n        if settings.github_token:\n            headers[\"Authorization\"] = f\"token {settings.github_token}\"\n        \n        async with httpx.AsyncClient(timeout=30.0) as client:\n            # Use the PR's diff URL from GitHub API\n            diff_url = pr_data.get(\"diff_url\") or f\"https://api.github.com/repos/{repository}/pulls/{pr_number}.diff\"\n            \n            response = await client.get(diff_url, headers=headers)\n            response.raise_for_status()\n            return response.text\n            \n    except Exception as e:\n        logger.error(\"Failed to get PR diff\", repo=repository, pr=pr_number, error=str(e))\n        raise\n\n\nasync def analyze_repository(repository: str, head_sha: str, base_sha: str) -> tuple[Dict[str, str], Dict]:\n    \"\"\"Analyze repository structure and get relevant file contents.\"\"\"\n    try:\n        # Use MCP tools to analyze repository\n        mcp_analyzer = get_mcp_analyzer()\n        analysis_result = await mcp_analyzer.analyze_repository(\n            repository=repository,\n            head_sha=head_sha,\n            base_sha=base_sha\n        )\n        \n        return analysis_result[\"file_contents\"], analysis_result[\"project_structure\"]\n        \n    except Exception as e:\n        logger.error(\"Repository analysis failed\", repo=repository, error=str(e))\n        # Return empty analysis if MCP fails\n        return {}, {}\n\n\nasync def post_review_to_github(repository: str, pr_number: int, review_result: Dict):\n    \"\"\"Post review results to GitHub.\"\"\"\n    try:\n        # Determine review event\n        recommendation = review_result.get(\"recommendation\", \"comment\")\n        \n        github_event_map = {\n            \"approve\": \"APPROVE\",\n            \"request_changes\": \"REQUEST_CHANGES\", \n            \"comment\": \"COMMENT\"\n        }\n        \n        event = github_event_map.get(recommendation, \"COMMENT\")\n        \n        # Format review summary\n        summary = format_review_summary(review_result)\n        \n        # Prepare inline comments\n        inline_comments = []\n        for comment in review_result.get(\"comments\", []):\n            if comment.get(\"filename\") and comment.get(\"line_number\"):\n                inline_comments.append({\n                    \"path\": comment[\"filename\"],\n                    \"line\": comment[\"line_number\"],\n                    \"body\": f\"**{comment['severity'].upper()}**: {comment['message']}\" + \n                           (f\"\\n\\n\ud83d\udca1 **Suggestion**: {comment['suggestion']}\" if comment.get('suggestion') else \"\")\n                })\n        \n        # Submit review\n        github_client = get_github_client()\n        await github_client.submit_review(\n            repository=repository,\n            pr_number=pr_number,\n            event=event,\n            body=summary,\n            comments=inline_comments[:20]  # Limit to 20 inline comments\n... [file truncated for analysis]",
        "src/junior/webhook.py": "\"\"\"Webhook handler for GitHub PR events.\"\"\"\n\nimport hashlib\nimport hmac\nfrom typing import Dict, List, Optional\n\nimport structlog\nfrom fastapi import HTTPException, Request\nfrom pydantic import BaseModel, Field\n\nfrom .config import settings\n\nlogger = structlog.get_logger(__name__)\n\n\nclass PullRequestWebhookPayload(BaseModel):\n    \"\"\"GitHub pull request webhook payload.\"\"\"\n    \n    action: str = Field(..., description=\"The action that was performed\")\n    number: int = Field(..., description=\"Pull request number\")\n    pull_request: Dict = Field(..., description=\"Pull request data\")\n    repository: Dict = Field(..., description=\"Repository data\")\n    sender: Dict = Field(..., description=\"User who triggered the event\")\n\n\nclass WebhookProcessor:\n    \"\"\"Process GitHub webhook events.\"\"\"\n    \n    def __init__(self):\n        self.logger = logger.bind(component=\"WebhookProcessor\")\n    \n    async def verify_signature(self, request: Request, payload: bytes) -> bool:\n        \"\"\"Verify GitHub webhook signature.\"\"\"\n        if not settings.github_webhook_secret:\n            self.logger.warning(\"No webhook secret configured, skipping verification\")\n            return True\n        \n        signature_header = request.headers.get(\"X-Hub-Signature-256\")\n        if not signature_header:\n            self.logger.error(\"No signature header found\")\n            return False\n        \n        try:\n            # GitHub sends signature as 'sha256=<hash>'\n            expected_signature = signature_header.split(\"=\")[1]\n            \n            # Calculate HMAC\n            mac = hmac.new(\n                settings.github_webhook_secret.encode(\"utf-8\"),\n                payload,\n                hashlib.sha256\n            )\n            calculated_signature = mac.hexdigest()\n            \n            # Secure comparison\n            is_valid = hmac.compare_digest(expected_signature, calculated_signature)\n            \n            if not is_valid:\n                self.logger.error(\"Invalid webhook signature\")\n                \n            return is_valid\n            \n        except Exception as e:\n            self.logger.error(\"Error verifying signature\", error=str(e))\n            return False\n    \n    def should_process_event(self, payload: PullRequestWebhookPayload) -> bool:\n        \"\"\"Determine if we should process this PR event.\"\"\"\n        # Process these actions\n        valid_actions = {\n            \"opened\",\n            \"synchronize\",  # New commits pushed\n            \"reopened\",\n            \"ready_for_review\"  # When draft is marked ready\n        }\n        \n        if payload.action not in valid_actions:\n            self.logger.info(\"Skipping action\", action=payload.action)\n            return False\n        \n        # Skip draft PRs (unless ready_for_review)\n        if payload.pull_request.get(\"draft\", False) and payload.action != \"ready_for_review\":\n            self.logger.info(\"Skipping draft PR\", pr_number=payload.number)\n            return False\n        \n        # Skip if PR is already merged or closed\n        if payload.pull_request.get(\"state\") != \"open\":\n            self.logger.info(\"Skipping non-open PR\", \n                           pr_number=payload.number, \n                           state=payload.pull_request.get(\"state\"))\n            return False\n        \n        return True\n    \n    def extract_review_data(self, payload: PullRequestWebhookPayload) -> Dict:\n        \"\"\"Extract comprehensive data for code review.\"\"\"\n        pr = payload.pull_request\n        repo = payload.repository\n        \n        # Extract commits information\n        commits = []\n        if \"commits\" in pr:\n            for commit in pr[\"commits\"]:\n                commits.append({\n                    \"sha\": commit[\"sha\"],\n                    \"message\": commit[\"commit\"][\"message\"],\n                    \"author\": commit[\"commit\"][\"author\"][\"name\"],\n                    \"author_email\": commit[\"commit\"][\"author\"][\"email\"],\n                    \"date\": commit[\"commit\"][\"author\"][\"date\"],\n                    \"url\": commit[\"html_url\"]\n                })\n        \n        # Extract linked issues from PR body\n        linked_issues = self._extract_linked_issues(pr.get(\"body\", \"\"))\n        \n        # Extract labels\n        labels = []\n        if \"labels\" in pr:\n            labels = [label[\"name\"] for label in pr[\"labels\"]]\n        \n        # Extract requested reviewers\n        requested_reviewers = []\n        if \"requested_reviewers\" in pr:\n            requested_reviewers = [reviewer[\"login\"] for reviewer in pr[\"requested_reviewers\"]]\n        \n        # Extract milestone\n        milestone = None\n        if pr.get(\"milestone\"):\n            milestone = {\n                \"title\": pr[\"milestone\"][\"title\"],\n                \"description\": pr[\"milestone\"][\"description\"],\n                \"due_on\": pr[\"milestone\"][\"due_on\"],\n                \"state\": pr[\"milestone\"][\"state\"]\n            }\n        \n        return {\n            # Basic PR info\n            \"repository\": repo[\"full_name\"],\n            \"pr_number\": payload.number,\n            \"title\": pr[\"title\"],\n            \"description\": pr.get(\"body\", \"\"),\n            \"author\": pr[\"user\"][\"login\"],\n            \"author_id\": pr[\"user\"][\"id\"],\n            \n            # Branch and SHA info\n            \"base_branch\": pr[\"base\"][\"ref\"],\n            \"head_branch\": pr[\"head\"][\"ref\"],\n            \"base_sha\": pr[\"base\"][\"sha\"],\n            \"head_sha\": pr[\"head\"][\"sha\"],\n            \n            # URLs for data fetching\n            \"diff_url\": pr[\"diff_url\"],\n            \"patch_url\": pr[\"patch_url\"],\n            \"pr_url\": pr[\"html_url\"],\n            \"issue_url\": pr[\"issue_url\"],\n            \n            # Repository info\n            \"clone_url\": repo[\"clone_url\"],\n            \"ssh_url\": repo[\"ssh_url\"],\n            \"default_branch\": repo[\"default_branch\"],\n            \"language\": repo.get(\"language\"),\n            \"size\": repo.get(\"size\", 0),\n            \"is_private\": repo.get(\"private\", False),\n            \"repo_description\": repo.get(\"description\", \"\"),\n            \n            # Timing info\n            \"created_at\": pr[\"created_at\"],\n            \"updated_at\": pr[\"updated_at\"],\n            \"closed_at\": pr.get(\"closed_at\"),\n            \"merged_at\": pr.get(\"merged_at\"),\n            \n            # Change statistics\n            \"additions\": pr.get(\"additions\", 0),\n            \"deletions\": pr.get(\"deletions\", 0),\n            \"changed_files\": pr.get(\"changed_files\", 0),\n            \n            # PR state and metadata\n            \"state\": pr[\"state\"],\n            \"draft\": pr.get(\"draft\", False),\n            \"mergeable\": pr.get(\"mergeable\"),\n            \"mergeable_state\": pr.get(\"mergeable_state\"),\n            \"merged\": pr.get(\"merged\", False),\n            \"merge_commit_sha\": pr.get(\"merge_commit_sha\"),\n            \n            # Commits information\n            \"commits\": commits,\n            \"commits_count\": len(commits),\n            \n            # Related issues and PRs\n            \"linked_issues\": linked_issues,\n            \"milestone\": milestone,\n            \n            # Review metadata\n            \"labels\": labels,\n            \"requested_reviewers\": requested_reviewers,\n            \"assignees\": [assignee[\"login\"] for assignee in pr.get(\"assignees\", [])],\n            \n            # GitHub event context\n            \"action\": payload.action,\n            \"sender\": payload.sender[\"login\"],\n            \"webhook_received_at\": None  # Will be set by the webhook handler\n        }\n    \n    def _extract_linked_issues(self, pr_body: str) -> List[Dict]:\n        \"\"\"Extract linked issues from PR description.\"\"\"\n        import re\n        \n        if not pr_body:\n            return []\n        \n        # Common patterns for linking issues\n        patterns = [\n            r\"(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\\s+#(\\d+)\",\n            r\"(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\\s+(?:https://github\\.com/[^/]+/[^/]+/issues/)(\\d+)\",\n            r\"#(\\d+)\",  # Simple issue references\n        ]\n        \n        linked_issues = []\n        for pattern in patterns:\n            matches = re.finditer(pattern, pr_body, re.IGNORECASE)\n            for match in matches:\n                issue_number = int(match.group(1))\n                if issue_number not in [issue[\"number\"] for issue in linked_issues]:\n                    linked_issues.append({\n                        \"number\": issue_number,\n                        \"type\": \"closes\" if \"close\" in match.group(0).lower() or \"fix\" in match.group(0).lower() or \"resolve\" in match.group(0).lower() else \"references\"\n                    })\n        \n        return linked_issues",
        "tests/conftest.py": "\"\"\"Pytest configuration and fixtures.\"\"\"\n\nimport os\nfrom unittest.mock import AsyncMock, MagicMock\n\nimport pytest\nfrom langchain_openai import ChatOpenAI\n\nfrom junior.agent import CodeReviewAgent\nfrom junior.config import Settings\nfrom junior.github_client import GitHubClient\nfrom junior.models import CodeReviewRequest, FileChange, FileStatus\n\n\n@pytest.fixture\ndef mock_settings():\n    \"\"\"Mock settings for testing.\"\"\"\n    return Settings(\n        openai_api_key=\"test-key\",\n        github_token=\"test-token\",\n        secret_key=\"test-secret\",\n        debug=True,\n    )\n\n\n@pytest.fixture\ndef sample_file_change():\n    \"\"\"Sample file change for testing.\"\"\"\n    return FileChange(\n        filename=\"test.py\",\n        status=FileStatus.MODIFIED,\n        additions=10,\n        deletions=5,\n        diff=\"\"\"@@ -1,5 +1,10 @@\n def hello():\n-    print(\"hello\")\n+    print(\"hello world\")\n+    return \"hello\"\n\"\"\",\n        content=\"\"\"def hello():\n    print(\"hello world\")\n    return \"hello\"\n\"\"\",\n    )\n\n\n@pytest.fixture\ndef sample_review_request(sample_file_change):\n    \"\"\"Sample code review request for testing.\"\"\"\n    return CodeReviewRequest(\n        repository=\"test/repo\",\n        pr_number=123,\n        title=\"Test PR\",\n        description=\"A test pull request\",\n        author=\"testuser\",\n        base_branch=\"main\",\n        head_branch=\"feature/test\",\n        files=[sample_file_change],\n    )\n\n\n@pytest.fixture\ndef mock_github_client():\n    \"\"\"Mock GitHub client.\"\"\"\n    client = MagicMock(spec=GitHubClient)\n    client.get_authenticated_user = AsyncMock(return_value={\n        \"login\": \"testuser\",\n        \"name\": \"Test User\",\n        \"email\": \"test@example.com\",\n        \"id\": 12345,\n    })\n    client.get_pull_request = AsyncMock(return_value={\n        \"number\": 123,\n        \"title\": \"Test PR\",\n        \"body\": \"Test description\",\n        \"state\": \"open\",\n        \"user\": {\"login\": \"testuser\", \"id\": 12345},\n        \"base\": {\"ref\": \"main\", \"sha\": \"abc123\"},\n        \"head\": {\"ref\": \"feature/test\", \"sha\": \"def456\"},\n    })\n    return client\n\n\n@pytest.fixture\ndef mock_llm():\n    \"\"\"Mock LLM for testing.\"\"\"\n    llm = MagicMock(spec=ChatOpenAI)\n    llm.ainvoke = AsyncMock(return_value=\"Mock AI response\")\n    return llm\n\n\n@pytest.fixture\ndef code_review_agent(mock_settings, monkeypatch):\n    \"\"\"Code review agent with mocked dependencies.\"\"\"\n    monkeypatch.setattr(\"junior.config.settings\", mock_settings)\n    \n    agent = CodeReviewAgent()\n    agent.llm = MagicMock()\n    agent.llm.ainvoke = AsyncMock(return_value=\"Mock review response\")\n    \n    return agent\n\n\n@pytest.fixture(autouse=True)\ndef setup_test_env(monkeypatch):\n    \"\"\"Set up test environment variables.\"\"\"\n    monkeypatch.setenv(\"OPENAI_API_KEY\", \"test-key\")\n    monkeypatch.setenv(\"GITHUB_TOKEN\", \"test-token\")\n    monkeypatch.setenv(\"SECRET_KEY\", \"test-secret\")\n    monkeypatch.setenv(\"DEBUG\", \"true\")",
        "tests/test_webhook.py": "\"\"\"Tests for webhook functionality.\"\"\"\n\nimport hashlib\nimport hmac\nimport json\nfrom unittest.mock import MagicMock\n\nimport pytest\nfrom fastapi.testclient import TestClient\n\nfrom junior.webhook import PullRequestWebhookPayload, WebhookProcessor\n\n\nclass TestWebhookProcessor:\n    \"\"\"Tests for WebhookProcessor.\"\"\"\n    \n    def test_webhook_payload_validation(self):\n        \"\"\"Test webhook payload validation.\"\"\"\n        valid_payload = {\n            \"action\": \"opened\",\n            \"number\": 123,\n            \"pull_request\": {\n                \"id\": 123,\n                \"title\": \"Test PR\",\n                \"body\": \"Test description\",\n                \"state\": \"open\",\n                \"draft\": False,\n                \"user\": {\"login\": \"testuser\"},\n                \"base\": {\"ref\": \"main\", \"sha\": \"abc123\"},\n                \"head\": {\"ref\": \"feature\", \"sha\": \"def456\"},\n                \"diff_url\": \"https://github.com/test/repo/pull/123.diff\",\n                \"patch_url\": \"https://github.com/test/repo/pull/123.patch\",\n                \"created_at\": \"2023-01-01T00:00:00Z\",\n                \"updated_at\": \"2023-01-01T00:00:00Z\",\n            },\n            \"repository\": {\n                \"id\": 456,\n                \"full_name\": \"test/repo\",\n                \"clone_url\": \"https://github.com/test/repo.git\",\n                \"ssh_url\": \"git@github.com:test/repo.git\",\n                \"default_branch\": \"main\",\n                \"language\": \"Python\",\n                \"size\": 1000,\n                \"private\": False,\n            },\n            \"sender\": {\"login\": \"testuser\", \"id\": 789}\n        }\n        \n        payload = PullRequestWebhookPayload(**valid_payload)\n        assert payload.action == \"opened\"\n        assert payload.number == 123\n        assert payload.pull_request[\"title\"] == \"Test PR\"\n    \n    @pytest.mark.asyncio\n    async def test_verify_signature_valid(self):\n        \"\"\"Test valid signature verification.\"\"\"\n        processor = WebhookProcessor()\n        \n        # Mock settings\n        from junior.config import Settings\n        test_settings = Settings(\n            github_token=\"test-token\",\n            secret_key=\"test-secret\",\n            github_webhook_secret=\"test-webhook-secret\"\n        )\n        \n        with pytest.MonkeyPatch().context() as m:\n            m.setattr(\"junior.webhook.settings\", test_settings)\n            \n            payload = b'{\"test\": \"data\"}'\n            expected_signature = hmac.new(\n                \"test-webhook-secret\".encode(\"utf-8\"),\n                payload,\n                hashlib.sha256\n            ).hexdigest()\n            \n            # Mock request\n            request = MagicMock()\n            request.headers.get.return_value = f\"sha256={expected_signature}\"\n            \n            is_valid = await processor.verify_signature(request, payload)\n            assert is_valid\n    \n    @pytest.mark.asyncio\n    async def test_verify_signature_invalid(self):\n        \"\"\"Test invalid signature verification.\"\"\"\n        processor = WebhookProcessor()\n        \n        from junior.config import Settings\n        test_settings = Settings(\n            github_token=\"test-token\",\n            secret_key=\"test-secret\",\n            github_webhook_secret=\"test-webhook-secret\"\n        )\n        \n        with pytest.MonkeyPatch().context() as m:\n            m.setattr(\"junior.webhook.settings\", test_settings)\n            \n            payload = b'{\"test\": \"data\"}'\n            \n            # Mock request with wrong signature\n            request = MagicMock()\n            request.headers.get.return_value = \"sha256=invalid_signature\"\n            \n            is_valid = await processor.verify_signature(request, payload)\n            assert not is_valid\n    \n    @pytest.mark.asyncio\n    async def test_verify_signature_no_secret(self):\n        \"\"\"Test signature verification when no secret is configured.\"\"\"\n        processor = WebhookProcessor()\n        \n        from junior.config import Settings\n        test_settings = Settings(\n            github_token=\"test-token\",\n            secret_key=\"test-secret\"\n        )\n        \n        with pytest.MonkeyPatch().context() as m:\n            m.setattr(\"junior.webhook.settings\", test_settings)\n            \n            payload = b'{\"test\": \"data\"}'\n            request = MagicMock()\n            \n            is_valid = await processor.verify_signature(request, payload)\n            assert is_valid  # Should pass when no secret configured\n    \n    def test_should_process_event_valid_actions(self):\n        \"\"\"Test processing of valid actions.\"\"\"\n        processor = WebhookProcessor()\n        \n        valid_actions = [\"opened\", \"synchronize\", \"reopened\", \"ready_for_review\"]\n        \n        for action in valid_actions:\n            payload = PullRequestWebhookPayload(\n                action=action,\n                number=123,\n                pull_request={\n                    \"state\": \"open\",\n                    \"draft\": False,\n                    \"title\": \"Test\",\n                    \"user\": {\"login\": \"test\"},\n                    \"base\": {\"ref\": \"main\", \"sha\": \"abc\"},\n                    \"head\": {\"ref\": \"feature\", \"sha\": \"def\"},\n                },\n                repository={\"full_name\": \"test/repo\"},\n                sender={\"login\": \"test\"}\n            )\n            \n            should_process = processor.should_process_event(payload)\n            assert should_process, f\"Should process action: {action}\"\n    \n    def test_should_process_event_invalid_actions(self):\n        \"\"\"Test skipping of invalid actions.\"\"\"\n        processor = WebhookProcessor()\n        \n        invalid_actions = [\"closed\", \"assigned\", \"labeled\", \"edited\"]\n        \n        for action in invalid_actions:\n            payload = PullRequestWebhookPayload(\n                action=action,\n                number=123,\n                pull_request={\n                    \"state\": \"open\",\n                    \"draft\": False,\n                    \"title\": \"Test\",\n                    \"user\": {\"login\": \"test\"},\n                    \"base\": {\"ref\": \"main\", \"sha\": \"abc\"},\n                    \"head\": {\"ref\": \"feature\", \"sha\": \"def\"},\n                },\n                repository={\"full_name\": \"test/repo\"},\n                sender={\"login\": \"test\"}\n            )\n            \n            should_process = processor.should_process_event(payload)\n            assert not should_process, f\"Should not process action: {action}\"\n    \n    def test_should_process_event_draft_pr(self):\n        \"\"\"Test skipping of draft PRs.\"\"\"\n        processor = WebhookProcessor()\n        \n        payload = PullRequestWebhookPayload(\n            action=\"opened\",\n            number=123,\n            pull_request={\n                \"state\": \"open\",\n                \"draft\": True,  # Draft PR\n                \"title\": \"Test\",\n                \"user\": {\"login\": \"test\"},\n                \"base\": {\"ref\": \"main\", \"sha\": \"abc\"},\n                \"head\": {\"ref\": \"feature\", \"sha\": \"def\"},\n            },\n            repository={\"full_name\": \"test/repo\"},\n            sender={\"login\": \"test\"}\n        )\n        \n        should_process = processor.should_process_event(payload)\n        assert not should_process\n    \n    def test_should_process_event_ready_for_review_draft(self):\n        \"\"\"Test processing of ready_for_review action even for draft PRs.\"\"\"\n        processor = WebhookProcessor()\n        \n        payload = PullRequestWebhookPayload(\n            action=\"ready_for_review\",\n            number=123,\n            pull_request={\n                \"state\": \"open\",\n                \"draft\": True,  # Draft PR but ready for review\n                \"title\": \"Test\",\n                \"user\": {\"login\": \"test\"},\n                \"base\": {\"ref\": \"main\", \"sha\": \"abc\"},\n                \"head\": {\"ref\": \"feature\", \"sha\": \"def\"},\n            },\n            repository={\"full_name\": \"test/repo\"},\n            sender={\"login\": \"test\"}\n        )\n        \n        should_process = processor.should_process_event(payload)\n        assert should_process\n    \n    def test_should_process_event_closed_pr(self):\n        \"\"\"Test skipping of closed PRs.\"\"\"\n        processor = WebhookProcessor()\n        \n        payload = PullRequestWebhookPayload(\n            action=\"synchronize\",\n            number=123,\n            pull_request={\n                \"state\": \"closed\",  # Closed PR\n                \"draft\": False,\n                \"title\": \"Test\",\n                \"user\": {\"login\": \"test\"},\n                \"base\": {\"ref\": \"main\", \"sha\": \"abc\"},\n                \"head\": {\"ref\": \"feature\", \"sha\": \"def\"},\n            },\n            repository={\"full_name\": \"test/repo\"},\n            sender={\"login\": \"test\"}\n        )\n        \n        should_process = processor.should_process_event(payload)\n        assert not should_process\n    \n    def test_extract_review_data(self):\n        \"\"\"Test extraction of review data from webhook payload.\"\"\"\n        processor = WebhookProcessor()\n        \n        payload = PullRequestWebhookPayload(\n            action=\"opened\",\n            number=123,\n            pull_request={\n                \"title\": \"Test PR\",\n                \"body\": \"Test description\",\n                \"state\": \"open\",\n                \"draft\": False,\n                \"user\": {\"login\": \"testuser\"},\n                \"base\": {\"ref\": \"main\", \"sha\": \"abc123\"},\n                \"head\": {\"ref\": \"feature/test\", \"sha\": \"def456\"},\n                \"diff_url\": \"https://github.com/test/repo/pull/123.diff\",\n                \"patch_url\": \"https://github.com/test/repo/pull/123.patch\",\n                \"created_at\": \"2023-01-01T00:00:00Z\",\n                \"updated_at\": \"2023-01-01T00:00:00Z\",\n                \"additions\": 50,\n                \"deletions\": 10,\n                \"changed_files\": 3,\n            },\n            repository={\n                \"full_name\": \"test/repo\",\n                \"clone_url\": \"https://github.com/test/repo.git\",\n                \"ssh_url\": \"git@github.com:test/repo.git\",\n                \"default_branch\": \"main\",\n                \"language\": \"Python\",\n\n... [file truncated for analysis]",
        "pyproject.toml": "[project]\nname = \"junior\"\nversion = \"0.1.0\"\ndescription = \"AI Agent for reviewing code and pull requests\"\nauthors = [\n    {name = \"Your Name\", email = \"your.email@example.com\"}\n]\nreadme = \"README.md\"\nlicense = {text = \"MIT\"}\nrequires-python = \">=3.11\"\nkeywords = [\"ai\", \"code-review\", \"langchain\", \"langraph\", \"automation\"]\nclassifiers = [\n    \"Development Status :: 3 - Alpha\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Topic :: Software Development :: Quality Assurance\",\n    \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n]\n\ndependencies = [\n    \"langchain>=0.1.0\",\n    \"langchain-openai>=0.1.0\",\n    \"langchain-anthropic>=0.1.0\",\n    \"langchain-community>=0.1.0\",\n    \"langgraph>=0.1.0\",\n    \"pydantic>=2.5.0\",\n    \"pydantic-settings>=2.0.0\",\n    \"aiohttp>=3.9.0\",\n    \"httpx>=0.25.0\",\n    \"python-dotenv>=1.0.0\",\n    \"structlog>=23.2.0\",\n    \"typer>=0.9.0\",\n    \"rich>=13.7.0\",\n    \"PyGithub>=2.1.0\",\n    \"gitpython>=3.1.0\",\n    \"diff-match-patch>=20230430\",\n    \"fastapi>=0.104.0\",\n    \"uvicorn>=0.24.0\",\n    \"mcp>=1.0.0\",\n    \"asyncio-throttle>=1.0.0\",\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest>=7.4.0\",\n    \"pytest-asyncio>=0.21.0\",\n    \"pytest-cov>=4.1.0\",\n    \"pytest-mock>=3.12.0\",\n    \"black>=23.12.0\",\n    \"isort>=5.13.0\",\n    \"flake8>=6.1.0\",\n    \"mypy>=1.8.0\",\n    \"pre-commit>=3.6.0\",\n    \"ruff>=0.1.0\",\n]\n\ntest = [\n    \"pytest>=7.4.0\",\n    \"pytest-asyncio>=0.21.0\",\n    \"pytest-cov>=4.1.0\",\n    \"pytest-mock>=3.12.0\",\n]\n\n[project.scripts]\njunior = \"junior.cli:main\"\n\n[project.urls]\nHomepage = \"https://github.com/yourusername/junior\"\nDocumentation = \"https://github.com/yourusername/junior#readme\"\nRepository = \"https://github.com/yourusername/junior\"\nIssues = \"https://github.com/yourusername/junior/issues\"\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[tool.hatch.build.targets.wheel]\npackages = [\"src/junior\"]\n\n[tool.black]\nline-length = 88\ntarget-version = ['py311']\ninclude = '\\.pyi?$'\nextend-exclude = '''\n/(\n  # directories\n  \\.eggs\n  | \\.git\n  | \\.hg\n  | \\.mypy_cache\n  | \\.tox\n  | \\.venv\n  | _build\n  | buck-out\n  | build\n  | dist\n)/\n'''\n\n[tool.isort]\nprofile = \"black\"\nmulti_line_output = 3\nline_length = 88\nknown_first_party = [\"junior\"]\n\n[tool.mypy]\npython_version = \"3.11\"\nwarn_return_any = true\nwarn_unused_configs = true\ndisallow_untyped_defs = true\ndisallow_incomplete_defs = true\ncheck_untyped_defs = true\ndisallow_untyped_decorators = true\nno_implicit_optional = true\nwarn_redundant_casts = true\nwarn_unused_ignores = true\nwarn_no_return = true\nwarn_unreachable = true\nstrict_equality = true\n\n[[tool.mypy.overrides]]\nmodule = [\n    \"langchain.*\",\n    \"langraph.*\",\n    \"github.*\",\n    \"git.*\",\n    \"diff_match_patch.*\",\n]\nignore_missing_imports = true\n\n[tool.pytest.ini_options]\nminversion = \"7.0\"\naddopts = \"-ra -q --strict-markers --strict-config\"\ntestpaths = [\"tests\"]\npython_files = [\"test_*.py\", \"*_test.py\"]\npython_classes = [\"Test*\"]\npython_functions = [\"test_*\"]\nmarkers = [\n    \"unit: marks tests as unit tests\",\n    \"integration: marks tests as integration tests\",\n    \"slow: marks tests as slow running\",\n]\n\n[tool.coverage.run]\nsource = [\"src\"]\nomit = [\n    \"*/tests/*\",\n    \"*/test_*\",\n    \"*/__pycache__/*\",\n]\n\n[tool.coverage.report]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"def __repr__\",\n    \"if self.debug:\",\n    \"if settings.DEBUG\",\n    \"raise AssertionError\",\n    \"raise NotImplementedError\",\n    \"if 0:\",\n    \"if __name__ == .__main__.:\",\n    \"class .*\\\\bProtocol\\\\):\",\n    \"@(abc\\\\.)?abstractmethod\",\n]\n\n[tool.ruff]\ntarget-version = \"py311\"\nline-length = 88\nselect = [\n    \"E\",  # pycodestyle errors\n    \"W\",  # pycodestyle warnings\n    \"F\",  # pyflakes\n    \"I\",  # isort\n    \"B\",  # flake8-bugbear\n    \"C4\", # flake8-comprehensions\n    \"UP\", # pyupgrade\n]\nignore = [\n    \"E501\",  # line too long, handled by black\n    \"B008\",  # do not perform function calls in argument defaults\n    \"C901\",  # too complex\n]\n\n[tool.ruff.per-file-ignores]\n\"__init__.py\" = [\"F401\"]\n\"tests/**/*\" = [\"B011\"]",
        "debug_integration_test.py": "#!/usr/bin/env python3\n\"\"\"\nStandalone debug script for testing GitHub integration.\nSet breakpoints in VSCode and run this file directly.\n\"\"\"\n\nimport asyncio\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add src to path\nsys.path.insert(0, str(Path(__file__).parent / \"src\"))\n\nfrom dotenv import load_dotenv\nload_dotenv()\n\nfrom junior.github_client import GitHubClient\n\n\nasync def debug_test_post_review_comment():\n    \"\"\"Debug version of the integration test.\"\"\"\n\n    # BREAKPOINT 1: Check environment\n    print(\"=== Debug Test Starting ===\")\n    token = os.getenv(\"GITHUB_TOKEN\")\n    print(f\"Token exists: {bool(token)}\")\n    print(f\"Token length: {len(token) if token else 0}\")\n\n    # Test configuration\n    repository = \"mishachepi/junior\"\n    pr_number = 1\n    body = f\"Debug test comment - {os.urandom(4).hex()}\"\n\n    print(f\"\\nRepository: {repository}\")\n    print(f\"PR Number: {pr_number}\")\n    print(f\"Comment: {body}\")\n\n    # BREAKPOINT 2: Create client\n    print(\"\\n--- Creating GitHub Client ---\")\n    github_client = GitHubClient()\n    print(\"Client created successfully\")\n\n    try:\n        # BREAKPOINT 3: Fetch PR info\n        print(\"\\n--- Fetching PR Info ---\")\n        pr_info = await github_client.get_pull_request(repository, pr_number)\n        print(f\"PR Title: {pr_info.get('title')}\")\n        print(f\"PR State: {pr_info.get('state')}\")\n        print(f\"PR Author: {pr_info.get('user', {}).get('login')}\")\n\n        # BREAKPOINT 4: Post comment\n        print(\"\\n--- Posting Comment ---\")\n        response = await github_client.post_review_comment(\n            repository=repository,\n            pr_number=pr_number,\n            body=body,\n        )\n\n        # BREAKPOINT 5: Check response\n        print(\"\\n--- Response Details ---\")\n        print(f\"Comment ID: {response.get('id')}\")\n        print(f\"Comment Body: {response.get('body')}\")\n        print(f\"Created At: {response.get('created_at')}\")\n\n        # Verify\n        assert response.get(\"body\") == body\n        print(\"\\n\u2705 Test PASSED!\")\n\n    except Exception as e:\n        print(f\"\\n\u274c Test FAILED!\")\n        print(f\"Error: {type(e).__name__}: {str(e)}\")\n        import traceback\n        traceback.print_exc()\n        return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(\"Starting debug script...\")\n    print(\"You can set breakpoints at lines marked with 'BREAKPOINT' comments\")\n    print(\"-\" * 50)\n\n    result = asyncio.run(debug_test_post_review_comment())\n\n    if result:\n        print(\"\\n\ud83c\udf89 All tests passed!\")\n        sys.exit(0)\n    else:\n        print(\"\\n\ud83d\ude1e Test failed!\")\n        sys.exit(1)",
        "debug_test.sh": "#!/bin/bash\n\necho \"Running test with Python debugger (pdb)...\"\necho \"Use 'b <line>' to set breakpoint\"\necho \"Use 'c' to continue, 'n' for next, 's' for step\"\necho \"----------------------------------------\"\n\n# Run with pdb\npython3 -m pdb -m pytest tests/test_integration.py::test_post_review_comment_integration -v -s\n\n# Alternative: Run standalone debug script with pdb\n# python3 -m pdb debug_integration_test.py",
        "README.md": "# Junior - AI Code Review Agent\n\nAn intelligent, webhook-based AI agent that provides comprehensive code reviews for GitHub pull requests, focusing on logic, security, critical bugs, and code quality.\n\n## \ud83d\ude80 Quick Start\n\n1. **Clone and setup:**\n   ```bash\n   git clone <repository-url>\n   cd junior\n   uv sync --all-extras\n   ```\n\n2. **Configure environment:**\n   ```bash\n   cp .env.example .env\n   # Edit .env with your API keys\n   ```\n\n3. **Test the setup:**\n   ```bash\n   uv run python scripts/quick_test.py\n   ```\n\n4. **Start the webhook server:**\n   ```bash\n   ./scripts/start.sh\n   # OR\n   uv run junior webhook-server --port 8000\n   ```\n\n## \ud83d\udd27 Configuration\n\nRequired environment variables:\n- `GITHUB_TOKEN` - GitHub Personal Access Token with repo permissions\n- Either `OPENAI_API_KEY` or `ANTHROPIC_API_KEY` - AI provider API key\n\nOptional:\n- `GITHUB_WEBHOOK_SECRET` - GitHub webhook secret for security\n- `SECRET_KEY` - Application secret key\n\n## \ud83d\udccb How It Works\n\n### The Review Flow\n\n1. **GitHub PR Event** \u2192 Webhook receives PR opened/updated/ready-for-review\n2. **Data Extraction** \u2192 Comprehensive PR information extraction including:\n   - PR metadata (title, description, author, branches)\n   - Commit history and linked issues  \n   - File changes and diff content\n   - Repository context and dependencies\n\n3. **MCP Repository Analysis** \u2192 Smart analysis with:\n   - Temporary repository cloning\n   - Project structure detection (Python, Node.js, etc.)\n   - Priority-based file content extraction\n   - Framework and dependency analysis\n\n4. **AI Review Pipeline** \u2192 Specialized review focusing on:\n   - **Logic Analysis** - Business logic, conditional flows, edge cases\n   - **Security Review** - Authentication logic, business logic vulnerabilities\n   - **Critical Bug Detection** - Memory safety, race conditions, zero-day potential\n   - **Naming Review** - Semantic clarity, domain appropriateness  \n   - **Optimization** - Algorithmic improvements, performance bottlenecks\n   - **Design Principles** - DRY, KISS, SOLID adherence\n\n5. **GitHub Integration** \u2192 Structured review submission:\n   - Review summary with severity breakdown\n   - Inline comments (limited to 20 most critical)\n   - Approve/Request Changes/Comment status\n\n### What Makes Junior Different\n\n- **Logic-Focused**: Unlike linters, Junior analyzes business logic and architectural decisions\n- **Security-Aware**: Identifies logical security vulnerabilities, not just code patterns  \n- **Context-Rich**: Uses repository structure and project dependencies for informed reviews\n- **Structured Output**: Consistent, actionable feedback with severity levels and suggestions\n\n## \ud83d\udd0c GitHub Integration\n\n### Webhook Setup\n\n1. Go to your repository \u2192 Settings \u2192 Webhooks \u2192 Add webhook\n2. Set Payload URL to: `https://your-server.com/webhook/github`\n3. Content type: `application/json`\n4. Select: \"Pull requests\" events\n5. Add webhook secret (optional but recommended)\n\n### Required GitHub Token Permissions\n\n- `repo` - Repository access\n- `pull_requests:write` - Create reviews and comments\n\n## \ud83e\uddea Testing\n\nRun the comprehensive test suite:\n```bash\nuv run python scripts/quick_test.py\n```\n\nCheck configuration:\n```bash\nuv run junior config-check\n```\n\nStart webhook server:\n```bash\nuv run junior webhook-server\n```\n\n## \ud83d\udcc1 Project Structure\n\n```\njunior/\n\u251c\u2500\u2500 src/junior/\n\u2502   \u251c\u2500\u2500 api.py              # FastAPI webhook service  \n\u2502   \u251c\u2500\u2500 webhook.py          # GitHub webhook processing\n\u2502   \u251c\u2500\u2500 review_agent.py     # Specialized AI review pipeline\n\u2502   \u251c\u2500\u2500 mcp_tools.py        # Repository analysis tools\n\u2502   \u251c\u2500\u2500 github_client.py    # GitHub API integration\n\u2502   \u251c\u2500\u2500 models.py           # Data models and schemas\n\u2502   \u251c\u2500\u2500 config.py          # Configuration management\n\u2502   \u2514\u2500\u2500 cli.py             # CLI (config-check, webhook-server)\n\u251c\u2500\u2500 tests/                 # Test suite\n\u251c\u2500\u2500 scripts/              # Utility scripts  \n\u251c\u2500\u2500 helm/                # Kubernetes deployment\n\u2514\u2500\u2500 docs/                # Documentation\n```\n\n## \ud83d\udea8 Review Categories\n\nJunior focuses on high-impact issues:\n\n- **Logic Issues** - Incorrect business logic, missing edge cases\n- **Security** - Authentication flaws, business logic vulnerabilities  \n- **Critical Bugs** - Memory safety, race conditions, data corruption\n- **Naming** - Semantic clarity, domain appropriateness\n- **Optimization** - Performance bottlenecks, algorithmic improvements\n- **Principles** - DRY, KISS, SOLID violations\n\n## \ud83d\udee0\ufe0f Development\n\n### Running Tests\n```bash\nuv run pytest\nuv run pytest --cov=src/junior --cov-report=xml\n```\n\n### Code Quality\n```bash\nuv run ruff check .\nuv run ruff format .\nuv run mypy src/\n```\n\n### Development Server\n```bash\nuv run junior webhook-server --reload --debug\n```\n\n## \ud83d\udc33 Docker\n\n### Build and Run\n```bash\n# Build image\ndocker build -t junior .\n\n# Run with docker-compose\ndocker-compose up -d\n```\n\n## \u2638\ufe0f Kubernetes Deployment\n\nDeploy to Kubernetes using Helm:\n\n```bash\n# Install dependencies\nhelm dependency update helm/junior\n\n# Deploy\nhelm install junior helm/junior \\\n  --set secrets.openaiApiKey=\"your-key\" \\\n  --set secrets.githubToken=\"your-token\" \\\n  --set secrets.secretKey=\"your-secret\"\n```\n\n## \u2699\ufe0f Advanced Configuration\n\n### Review Settings\n```env\n# Review toggles\nENABLE_SECURITY_CHECKS=true\nENABLE_PERFORMANCE_CHECKS=true\nENABLE_STYLE_CHECKS=true\nENABLE_COMPLEXITY_CHECKS=true\n\n# Review limits\nMAX_FILE_SIZE=100000\nMAX_FILES_PER_PR=50\nREVIEW_TIMEOUT=300\n```\n\n### AI Model Settings\n```env\n# Model configuration\nDEFAULT_MODEL=gpt-4o\nTEMPERATURE=0.1\nMAX_TOKENS=4000\n```\n\n## \ud83c\udfd7\ufe0f Architecture\n\nJunior uses a modern, webhook-driven architecture:\n\n- **FastAPI** - Webhook endpoints and API services\n- **LangChain + LangGraph** - Structured AI workflows  \n- **MCP Tools** - Repository analysis and understanding\n- **Pydantic** - Data validation and settings\n- **GitPython** - Git operations and repository analysis\n\n### Review Pipeline Architecture\n\n```\nGitHub PR Event \u2192 Webhook Validation \u2192 Repository Cloning \u2192 \nFile Analysis \u2192 AI Review Pipeline \u2192 GitHub API Response\n```\n\nEach step is optimized for accuracy and performance, with comprehensive error handling and logging.\n\n## \ud83e\udd1d Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Add tests for new functionality\n5. Run the test suite\n6. Submit a pull request\n\n## \ud83d\udcc4 License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## \ud83d\udcde Support\n\n- \ud83d\udc1b [Issue Tracker](https://github.com/yourusername/junior/issues)\n- \ud83d\udcac [Discussions](https://github.com/yourusername/junior/discussions)\n- \ud83d\udcd6 [Documentation](https://github.com/yourusername/junior/wiki)",
        ".dockerignore": "# Git\n.git\n.gitignore\n\n# Python\n__pycache__\n*.pyc\n*.pyo\n*.pyd\n.Python\nbuild\ndevelop-eggs\ndist\ndownloads\neggs\n.eggs\nlib\nlib64\nparts\nsdist\nvar\nwheels\n*.egg-info\n.installed.cfg\n*.egg\n\n# Virtual environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Testing\n.pytest_cache\n.coverage\nhtmlcov/\n.tox/\n.nox/\n\n# IDE\n.vscode/\n.idea/\n*.swp\n*.swo\n\n# OS\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n\n# Logs\n*.log\nlogs/\n\n# Temporary files\ntemp/\ntmp/\n.tmp/\n\n# Documentation\ndocs/\n*.md\n!README.md\n\n# CI/CD\n.github/\n\n# Junior specific\njunior.db\n.junior/",
        "STARTUP.md": "# \ud83d\ude80 Junior Agent - Complete Startup Guide\n\n## \u2705 **System Status: READY FOR PRODUCTION**\n\nYour Junior AI Code Review Agent has been fully tested and is ready to review PRs!\n\n## \ud83d\udd27 **Environment Setup**\n\n### 1. Required Environment Variables\n\nCreate your `.env` file:\n```bash\ncp .env.example .env\n```\n\nAdd these **required** variables:\n```env\n# GitHub Integration (REQUIRED)\nGITHUB_TOKEN=ghp_your_github_personal_access_token\n\n# AI Provider (REQUIRED - choose one)\nOPENAI_API_KEY=sk-your_openai_api_key\n# OR\nANTHROPIC_API_KEY=sk-ant-your_anthropic_api_key\n\n# Optional Security\nGITHUB_WEBHOOK_SECRET=your_webhook_secret\nSECRET_KEY=your_app_secret_key\n```\n\n### 2. GitHub Token Setup\n\nCreate a GitHub Personal Access Token with these permissions:\n- `repo` - Full repository access\n- `pull_requests:write` - Create reviews and comments  \n- `metadata:read` - Read repository metadata\n\n## \ud83c\udfaf **Start the Agent**\n\n### Option 1: Quick Start Script\n```bash\n./scripts/start.sh\n```\n\n### Option 2: Manual Start\n```bash\n# Test everything works\nuv run python scripts/quick_test.py\n\n# Start the webhook server\nuv run junior webhook-server --port 8000\n```\n\n### Option 3: Direct FastAPI\n```bash\nuv run uvicorn src.junior.api:app --host 0.0.0.0 --port 8000\n```\n\n## \ud83d\udd0c **GitHub Webhook Configuration**\n\n1. Go to your repository \u2192 **Settings** \u2192 **Webhooks** \u2192 **Add webhook**\n\n2. Configure webhook:\n   ```\n   Payload URL: https://your-server.com/webhook/github\n   Content Type: application/json\n   Secret: your_webhook_secret (optional but recommended)\n   Events: \u2705 Pull requests\n   Active: \u2705 Active\n   ```\n\n3. Test webhook:\n   - Create a test PR\n   - Check webhook deliveries in GitHub\n   - Check your server logs\n\n## \ud83d\udcca **Available Endpoints**\n\n| Endpoint | Method | Purpose |\n|----------|--------|---------|\n| `/health` | GET | Health check - always works |\n| `/ready` | GET | Readiness check - requires GitHub token |\n| `/webhook/github` | POST | Main webhook endpoint for PR events |\n| `/review` | POST | Manual review endpoint (debug mode only) |\n\n## \ud83e\uddea **Testing Commands**\n\n```bash\n# Test all imports and basic functionality\nuv run python scripts/quick_test.py\n\n# Test complete end-to-end flow (with mocks)\nuv run python scripts/test_complete_flow.py\n\n# Test webhook with realistic data (requires running server)\nuv run python scripts/test_webhook_simple.py\n\n# Test health endpoint\ncurl http://localhost:8000/health\n\n# Test readiness (requires GITHUB_TOKEN)\ncurl http://localhost:8000/ready\n\n# Check configuration and API connectivity\nuv run junior config-check\n\n# View all available CLI commands\nuv run junior --help\n```\n\n## \ud83d\udd0d **Execution Flow Verified**\n\n\u2705 **1. Webhook Reception** (`/webhook/github`)\n- Receives GitHub PR events\n- Validates payload structure\n- Verifies webhook signature (if configured)\n- Filters for relevant events (opened, synchronize, ready_for_review)\n\n\u2705 **2. PR Data Extraction** (`WebhookProcessor`)\n- Extracts comprehensive PR metadata\n- Parses linked issues (`fixes #123`)\n- Collects commit history and file changes\n- Gathers repository context\n\n\u2705 **3. Repository Analysis** (`MCPRepositoryAnalyzer`)\n- Clones repository to temporary directory\n- Analyzes project structure (Python, Node.js, etc.)\n- Prioritizes files: changed \u2192 config \u2192 context \u2192 entry points\n- Extracts relevant file contents with smart limits\n\n\u2705 **4. AI Review Pipeline** (`LogicalReviewAgent`)\n- **Logic Analysis**: Business logic, conditional flows, edge cases\n- **Security Review**: Authentication logic, business vulnerabilities\n- **Critical Bug Detection**: Memory safety, race conditions, zero-day potential\n- **Naming Review**: Semantic clarity, domain appropriateness\n- **Optimization Analysis**: Performance bottlenecks, algorithmic improvements\n- **Design Principles**: DRY, KISS, SOLID adherence\n\n\u2705 **5. GitHub Integration** (`GitHubClient`)\n- Formats review summary with severity breakdown\n- Creates inline comments (max 20 most critical)\n- Submits review with appropriate status (approve/request_changes/comment)\n\n## \ud83d\udcdd **Sample Review Output**\n\nJunior will post reviews like this:\n\n```markdown\n## \ud83e\udd16 Junior Code Review\n\nThis PR introduces new authentication logic with a few concerns around error handling and security.\n\n\ud83d\udcca **Findings Summary**: 3 total \u2022 \ud83d\udd34 1 critical \u2022 \ud83d\udfe1 2 medium\n\n---\n*Reviewed by Junior AI Agent - Focusing on logic, security, and code quality*\n```\n\nPlus inline comments on specific lines with suggestions.\n\n## \ud83d\udea8 **Review Focus Areas**\n\nJunior specializes in **logical analysis**, not linting:\n\n**\u2705 What Junior Reviews:**\n- Business logic correctness\n- Security vulnerabilities (logical)\n- Critical bugs and race conditions\n- Naming semantics and clarity\n- Performance bottlenecks\n- Design principle violations\n\n**\u274c What Junior Ignores:**\n- Code formatting (use Prettier/Black)\n- Syntax errors (use your IDE)\n- Style guide violations (use ESLint/Ruff)\n- Dependency vulnerabilities (use Dependabot)\n\n## \ud83d\udc33 **Docker Deployment**\n\n```bash\n# Build and run\ndocker build -t junior .\ndocker run -p 8000:8000 --env-file .env junior\n\n# Or use docker-compose\ndocker-compose up -d\n```\n\n## \u2638\ufe0f **Kubernetes Deployment**\n\n```bash\n# Deploy to k8s\nhelm install junior helm/junior \\\n  --set secrets.githubToken=\"$GITHUB_TOKEN\" \\\n  --set secrets.openaiApiKey=\"$OPENAI_API_KEY\"\n```\n\n## \ud83c\udf89 **You're Ready!**\n\nYour Junior agent is now:\n- \u2705 **Tested**: All components working\n- \u2705 **Optimized**: Clean, focused codebase  \n- \u2705 **Production-Ready**: Proper error handling and logging\n- \u2705 **Documented**: Clear setup and usage instructions\n\nJust add your API keys and start reviewing PRs! \ud83d\ude80",
        "docker-compose.yml": "version: '3.8'\n\nservices:\n  junior:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: junior\n    environment:\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}\n      - GITHUB_TOKEN=${GITHUB_TOKEN}\n      - SECRET_KEY=${SECRET_KEY}\n      - LOG_LEVEL=${LOG_LEVEL:-INFO}\n      - DEBUG=${DEBUG:-false}\n      - DATABASE_URL=postgresql://junior:junior@postgres:5432/junior\n    env_file:\n      - .env\n    volumes:\n      - ./logs:/app/logs\n      - ./data:/app/data\n    networks:\n      - junior-network\n    depends_on:\n      - postgres\n      - redis\n    restart: unless-stopped\n\n  postgres:\n    image: postgres:16-alpine\n    container_name: junior-postgres\n    environment:\n      - POSTGRES_DB=junior\n      - POSTGRES_USER=junior\n      - POSTGRES_PASSWORD=junior\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    networks:\n      - junior-network\n    restart: unless-stopped\n\n  redis:\n    image: redis:7-alpine\n    container_name: junior-redis\n    volumes:\n      - redis_data:/data\n    networks:\n      - junior-network\n    restart: unless-stopped\n\n  # Webhook API service (main service)\n  webhook-api:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: junior-webhook-api\n    environment:\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}\n      - GITHUB_TOKEN=${GITHUB_TOKEN}\n      - GITHUB_WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET}\n      - SECRET_KEY=${SECRET_KEY}\n      - LOG_LEVEL=${LOG_LEVEL:-INFO}\n      - DEBUG=${DEBUG:-false}\n      - DATABASE_URL=postgresql://junior:junior@postgres:5432/junior\n      - API_HOST=0.0.0.0\n      - API_PORT=8000\n      - MAX_FILES_PER_PR=${MAX_FILES_PER_PR:-50}\n      - REVIEW_TIMEOUT=${REVIEW_TIMEOUT:-300}\n      - ENABLE_SECURITY_CHECKS=${ENABLE_SECURITY_CHECKS:-true}\n      - ENABLE_PERFORMANCE_CHECKS=${ENABLE_PERFORMANCE_CHECKS:-true}\n      - ENABLE_STYLE_CHECKS=${ENABLE_STYLE_CHECKS:-true}\n      - ENABLE_COMPLEXITY_CHECKS=${ENABLE_COMPLEXITY_CHECKS:-true}\n    env_file:\n      - .env\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - ./logs:/app/logs\n      - ./temp:/app/temp\n    networks:\n      - junior-network\n    depends_on:\n      - postgres\n      - redis\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n\nvolumes:\n  postgres_data:\n  redis_data:\n\nnetworks:\n  junior-network:\n    driver: bridge",
        ".env.example": "# AI Provider Configuration\nOPENAI_API_KEY=your_openai_api_key_here\nANTHROPIC_API_KEY=your_anthropic_api_key_here\n\n# GitHub Configuration\nGITHUB_TOKEN=your_github_token_here\nGITHUB_WEBHOOK_SECRET=your_webhook_secret_here\n\n# Webhook Configuration\nMAX_FILES_PER_PR=50\nREVIEW_TIMEOUT=300\n\n# Application Configuration\nLOG_LEVEL=INFO\nDEBUG=false\n\n# Database (optional)\nDATABASE_URL=sqlite:///junior.db\n\n# API Configuration\nAPI_HOST=0.0.0.0\nAPI_PORT=8000\n\n# Security\nSECRET_KEY=your_secret_key_here"
    },
    "project_structure": {
        "project_type": "python",
        "main_language": "python",
        "frameworks": [
            "flask"
        ],
        "dependencies": {},
        "directory_structure": {
            ".py": 1,
            "": 1,
            ".sh": 1,
            ".toml": 1,
            "tests": {
                ".py": 9
            },
            ".md": 3,
            "scripts": {
                ".py": 4,
                ".sh": 1
            },
            ".yml": 1,
            "helm": {
                "junior": {
                    ".yaml": 2,
                    "templates": {}
                }
            },
            "src": {
                "junior": {
                    ".py": 10
                }
            }
        },
        "config_files": [
            "pyproject.toml",
            ".dockerignore",
            ".gitignore",
            "docker-compose.yml"
        ],
        "test_directories": [
            "tests"
        ],
        "documentation_files": [
            "README.md"
        ],
        "build_files": [],
        "ci_files": [
            ".github/workflows/deploy.yml",
            ".github/workflows/ci.yml"
        ]
    }
}